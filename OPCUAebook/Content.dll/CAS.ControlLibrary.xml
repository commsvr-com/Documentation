<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CAS.ControlLibrary</name>
    </assembly>
    <members>
        <member name="T:CAS.Lib.ControlLibrary.GenericEventArgs`1">
            <summary>
            Generic EventArgs class
            </summary>
            <typeparam name="T">class stat is stored in this event arg</typeparam>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GenericEventArgs`1"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GenericEventArgs`1.Tag">
            <summary>
            Access to stored Class
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.ShapeList">
            <summary>
            List of the Shapes
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeList.DeselectAllShapes">
            <summary>
            Deselects all shapes.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeList.GetSelectedShape">
            <summary>
            Gets the selected shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeList.MoveToTopSelectedShapeAndReturnSelectedShape">
            <summary>
            Moves to top selected shape and return selected shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeList.RemoveSelectedShape">
            <summary>
            Removes the selected shape.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeList.Add(CAS.Lib.ControlLibrary.GDI.Shape)">
            <summary>
            Adds the specified shape.
            </summary>
            <param name="sh">The shape.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeList.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeList.IsAnySelected">
            <summary>
            Determines whether [is any selected].
            </summary>
            <returns>
            	<c>true</c> if [is any selected]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.ShapeList"/> class.
            </summary>
        </member>
        <member name="E:CAS.Lib.ControlLibrary.GDI.ShapeList.ShapeIsRemoved">
            <summary>
            Occurs when [shape is removed].
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.IIsSelected">
            <summary>
            IsSelected is interface that indicate if particular object is selected
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.IIsConnected">
            <summary>
            IsConnected is interface that indicate if particular object is Connected
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.OPCTreeView">
            <summary>
            OPC products dedicated <see cref="T:System.Windows.Forms.TreeView"/> 
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.OPCTreeView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.OPCTreeView"/> class.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.OPCTreeView.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.OPCTreeView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.OPCTreeView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.OPCTreeView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.ImageListLibrary">
            <summary>
            Image List Library
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.ImageListLibrary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.ImageListLibrary"/> class.
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.ImageListLibrary.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.ImageListLibrary.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ImageListLibrary.ProjectImageList">
            <summary>
            Gets the project image list.
            </summary>
            <value>The project image list.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ImageListLibrary.StaticProjectImageList">
            <summary>
            Gets the project static image list.
            </summary>
            <value>The project image list.</value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.ImageListLibrary.Icons">
            <summary>
            
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_CLOSED_YELLOW_FOLDER">
            <summary>
            image closed yellow folder
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_OPEN_YELLOW_FOLDER">
            <summary>
            image open yellow folder
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_SUBSCRIPTION">
            <summary>
            image subscription
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_SUBSCRIPTION_SB">
            <summary>
            image subscription standby
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_SUBSCRIPTION_FAIL">
            <summary>
            image subscription standby
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_SUBSCRIPTION_WOR">
            <summary>
            image subscription worning
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_SUBSCRIPTION_DISABLED">
            <summary>
            image subscription disabled
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_TAG">
            <summary>
            image tag
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_TAG_SB">
            <summary>
            image tag standby
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_TAG_FAIL">
            <summary>
            image tag fail
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_TAG_WOR">
            <summary>
            image tag worning
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_PROPERTY">
            <summary>
            image property
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_PROPERTY_SB">
            <summary>
            image property standby
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_PROPERTY_FAIL">
            <summary>
            image property fail
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_PROPERTY_WOR">
            <summary>
            image property worning
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_OPC_SERVER">
            <summary>
            image opc server
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_OPC_SERVER_SB">
            <summary>
            image opc server standby
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_OPC_SERVER_FAIL">
            <summary>
            image opc server fail
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_OPC_SERVER_WOR">
            <summary>
            image opc server worning
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_NETWORK">
            <summary>
            image network
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_MYCOMPUTER">
            <summary>
            image mycomputer
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_DICTIONARY">
            <summary>
            image dictionary
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_PROCESSING_ENVIRONMENT">
            <summary>
            image processing environment
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_TRANSACTION">
            <summary>
            image transaction
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_OPERATION">
            <summary>
            image operation
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImageListLibrary.Icons.IMAGE_OPC_ENVIRONMENT">
            <summary>
            image network folder
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.AddObject`1">
            <summary>
            Form allowing to modify properties of new created object.
            </summary>
            <typeparam name="TObject">Type of the object to modify and accept properties.</typeparam>
            <summary>
            The form allows to edit values of the browse-able properties of the assigned object using property grid. 
            Returning dialog result can be used to accept or reject changes.
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.AddObject`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.AddObject`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.AddObject`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.AddObject`1.#ctor">
            <summary>
            Default creator of the object
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.AddObject`1.#ctor(`0)">
            <summary>
            constructor
            </summary>
            <param name="pObjectToEdit">Object to be edit</param>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.AddObject`1.Object">
            <summary>
            Sets the reference of the object to be modified.
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.ConnectionsList">
            <summary>
            List of the connections
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.IDraw">
            <summary>
            Interface that allow to draw the object
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.IDraw.Draw(System.Drawing.Graphics,CAS.Lib.ControlLibrary.GDI.GraphicsSettings)">
            <summary>
            Draws the object on the specified dc.
            </summary>
            <param name="dc">The DeviceContext.</param>
            <param name="MyGraphicsSettings">The graphics settings.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ConnectionsList.Draw(System.Drawing.Graphics,CAS.Lib.ControlLibrary.GDI.GraphicsSettings)">
            <summary>
            Draws the object on the specified dc.
            </summary>
            <param name="dc">The DeviceContext.</param>
            <param name="MyGraphicsSettings">The graphics settings.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ConnectionsList.MatchAndSelectConnection(System.Drawing.Point)">
            <summary>
            Matches the and select connection.
            </summary>
            <param name="Point">The point.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ConnectionsList.IsAnySelected">
            <summary>
            Determines whether any connection is selected.
            </summary>
            <returns>
            	<c>true</c> if [is any selected]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ConnectionsList.RemoveSelectedConnection">
            <summary>
            Removes the selected connection.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ConnectionsList.Add(CAS.Lib.ControlLibrary.GDI.Connection)">
            <summary>
            Adds the specified cn.
            </summary>
            <param name="cn">The cn.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ConnectionsList.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="E:CAS.Lib.ControlLibrary.GDI.ConnectionsList.ListHasChanged">
            <summary>
            Occurs when [list has changed].
            </summary>
        </member>
        <member name="E:CAS.Lib.ControlLibrary.GDI.ConnectionsList.ConnectionIsRemoved">
            <summary>
            Occurs when [connection is removed].
            </summary>
        </member>
        <member name="E:CAS.Lib.ControlLibrary.GDI.ConnectionsList.ConnectionIsAdded">
            <summary>
            Occurs when [connection is added].
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.HotPoint">
            <summary>
            HotPoint - point that could be clicked/selected - this is standard point with rectangle arround to easier click on it detection
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.IMatch">
            <summary>
            IMatch - this interface is used to detect whether mous click match object that implements this interface
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.IMatch.Match(System.Drawing.Point)">
            <summary>
            tests if matches the specified point.
            </summary>
            <param name="_point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.HotPoint.#ctor(CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints,System.Drawing.Size,System.Drawing.Point,System.Boolean,System.Boolean,CAS.Lib.ControlLibrary.GDI.HotpointType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.HotPoint"/> class.
            </summary>
            <param name="parrent">The parrent shape.</param>
            <param name="MySize">the size of hotpoint.</param>
            <param name="point">The center point.</param>
            <param name="IsHorizontal">if set to <c>true</c> [is horizontal].</param>
            <param name="IsFixed">if set to <c>true</c> [is fixed].</param>
            <param name="Type">The type of the Hotpoint.</param>
            <param name="NumberInParentShape">The number in parent shape.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.HotPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.HotPoint.Match(System.Drawing.Point)">
            <summary>
            tests if matches the specified point.
            </summary>
            <param name="pt">The point.</param>
            <returns></returns>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.MyRectangle">
            <summary>
            Gets the rectangle of the hotpoint.
            </summary>
            <value>The rectangle.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.ParrentShape">
            <summary>
            Gets the parrent shape.
            </summary>
            <value>The parrent shape.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.MyCenterPoint">
            <summary>
            Gets or sets the center point.
            </summary>
            <value>The center point.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.RelativeLocation">
            <summary>
            Gets the relative location.
            </summary>
            <value>The relative location.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.AbsoluteLocation">
            <summary>
            Gets the absolute location.
            </summary>
            <value>The absolute location.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.MyCenterPointOnParentControl">
            <summary>
            Gets the center point on parent control.
            </summary>
            <value>The center point on parent control.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.IsHorizontal">
            <summary>
            Gets a value indicating whether this instance is horizontal.
            </summary>
            <value>
            	<c>true</c> if this instance is horizontal; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.IsVertical">
            <summary>
            Gets a value indicating whether this instance is vertical.
            </summary>
            <value>
            	<c>true</c> if this instance is vertical; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.IsFixed">
            <summary>
            Gets a value indicating whether this instance is fixed.
            </summary>
            <value><c>true</c> if this instance is fixed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPoint.NumberInParentShape">
            <summary>
            Gets the number in parent shape.
            </summary>
            <value>The number in parent shape.</value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.GraphicsSettings">
            <summary>
            Class that represents graphic setting
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.HatchStyle,System.Single,System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.GraphicsSettings"/> class.
            </summary>
            <param name="BackgroundColor">Color of the background.</param>
            <param name="ForegroundColor">Color of the foreground.</param>
            <param name="SelectionPenColor">Color of the selection pen.</param>
            <param name="TextColor">Color of the text.</param>
            <param name="HatchStyle">The hatch style.</param>
            <param name="PenWidth">Width of the pen.</param>
            <param name="FontFamily">The font family.</param>
            <param name="FontSize">Size of the font.</param>
            <param name="FontStyle">The font style.</param>
            <param name="Zoom">The zoom.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.GetGraphicsSettingsWithSpecifiedZoom(System.Single)">
            <summary>
            Gets the graphics settings with specified zoom.
            </summary>
            <param name="zoom">The zoom.</param>
            <returns></returns>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.BackgroundPen">
            <summary>
            Gets the background pen.
            </summary>
            <value>The background pen.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.MainPen">
            <summary>
            Gets the main pen.
            </summary>
            <value>The main pen.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.TextPen">
            <summary>
            Gets the text pen.
            </summary>
            <value>The text pen.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.SelectionPen">
            <summary>
            Gets the selection pen.
            </summary>
            <value>The selection pen.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.BackgroundBrush">
            <summary>
            Gets the background brush.
            </summary>
            <value>The background brush.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.MainBrush">
            <summary>
            Gets the main brush.
            </summary>
            <value>The main brush.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.TextBrush">
            <summary>
            Gets the text brush.
            </summary>
            <value>The text brush.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.SelectionBrush">
            <summary>
            Gets the selection brush.
            </summary>
            <value>The selection brush.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.MainFont">
            <summary>
            Gets the main font.
            </summary>
            <value>The main font.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.Zoom">
            <summary>
            Gets or sets the zoom.
            </summary>
            <value>The zoom.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.GraphicsSettings.Default">
            <summary>
            Gets the default graphisc settings.
            </summary>
            <value>The default graphisc settings.</value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.OperationShape">
            <summary>
            Shape for operation
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpointsAndLabel">
            <summary>
            Shape with hotpoints and label on it
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints">
            <summary>
            The shape with hotpoints on it
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.Shape">
            <summary>
            Shape root graphical element
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.Shape.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.Shape.paths">
            <summary>
            Path that displays this shape
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.RefreshPathRootShape">
            <summary>
            Refreshes the path of the root shape.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.RefreshPath">
            <summary>
            Refreshes the path. this function recreate the shape depends on the control size
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.RecalculateAndCheckSizeOfTheShape">
            <summary>
            Recalculates the and check size of the shape. This method should be override by child class to checks any restrictions that size of the shape should preserve.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.AddPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Adds the path.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.Shape_Resize(System.Object,System.EventArgs)">
            <summary>
            Handles the Resize event of the Shape control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.Shape_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Handles the Paint event of the Shape control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.Shape"/> class.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Shape.UpdateStableLocation">
            <summary>
            Updates the stable location.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.Shape.MyGraphicsSettings">
            <summary>
            Gets my graphics settings.
            </summary>
            <value>My graphics settings.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.Shape.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.Shape.StableLocation">
            <summary>
            Gets the stable location. This location is not changed while shape is moved.
            </summary>
            <value>The stable location.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.Shape.Zoom">
            <summary>
            Gets or sets the zoom.
            </summary>
            <value>The zoom.</value>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.HotpointsInputs">
            <summary>
            the array of hotpoints inputs
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.InitializeComponent">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.OperationShape_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseDown event of the OperationShape control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.OperationShape_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Handles the Paint event of the OperationShape control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.OperationShape_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseUp event of the OperationShape control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints"/> class.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.MatchAndSelectHotpoint(System.Drawing.Point)">
            <summary>
            Matches and selects the hotpoint. 
            This function checks whether one of the hotpoints is clicked and if yes the hotpoint is selected.
            </summary>
            <param name="PointToBeChecked">The point that is clicked.</param>
            <returns></returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.GetHotpoint(CAS.Lib.ControlLibrary.GDI.HotpointType,System.Int32)">
            <summary>
            Gets the hotpoint.
            </summary>
            <param name="Type">The type.</param>
            <param name="HotpointNumber">The hotpoint number.</param>
            <returns></returns>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.SelectedHotpoint">
            <summary>
            Gets the selected hotpoint.
            </summary>
            <value>The selected hotpoint.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints.HotPointIsMatched">
            <summary>
            Gets a value indicating whether one of the hotpoint is matched.
            </summary>
            <value><c>true</c> if the hotpoint is matched; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpointsAndLabel.RefreshPath">
            <summary>
            Refreshes the path. this function recreate the shape depends on the control size
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpointsAndLabel.RecalculateAndCheckSizeOfTheShape">
            <summary>
            Recalculates the and check size of the shape. This method should be override by child class to checks any restrictions that size of the shape should preserve.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpointsAndLabel.GetLabelSize">
            <summary>
            Gets the size of the label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpointsAndLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpointsAndLabel"/> class.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpointsAndLabel.TextLabel">
            <summary>
            Gets or sets the text label.
            </summary>
            <value>The text label.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.ShapeWithHotpointsAndLabel.TextMarginInPixels">
            <summary>
            Gets or sets the text margin in pixels.
            </summary>
            <value>The text margin in pixels.</value>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.OperationShape.RefreshPath">
            <summary>
            Refreshes the path. this function recreate the shape depends on the control size
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.OperationShape.RecalculateAndCheckSizeOfTheShape">
            <summary>
            Recalculates the and check size of the shape. This method should be override by child class to checks any restrictions that size of the shape should preserve.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.OperationShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.OperationShape"/> class.
            </summary>
            <param name="NumberOfInputs">The number of inputs.</param>
            <param name="NumberOfOutputs">The number of outputs.</param>
            <param name="NumberOfTopInputs">The number of top inputs.</param>
            <param name="NumberOfBottomInputs">The number of bottom inputs.</param>
            <param name="MainShapeColor">the main color of the shape.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.OperationShape.OperationShape_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseDown event of the OperationShape control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.OperationShape.ChangeNumberOfInputs(CAS.Lib.ControlLibrary.GDI.HotpointType,System.Int32)">
            <summary>
            Changes the number of inputs.
            </summary>
            <param name="HotpointType">Type of the hotpoint.</param>
            <param name="NewInputNumber">The new input number.</param>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.OperationShape.ToolTipText">
            <summary>
            Gets or sets the tool tip text.
            </summary>
            <value>The tool tip text.</value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.ITreeNodeInterface">
            <summary>
            Interface of the tree node
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.ITreeNodeInterface.GetMenuItems">
            <summary>
            Gets the menu items.
            A node should return the items for the context menu that allow to perform any operation on the node.
            </summary>
            <returns>the menu items</returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.ITreeNodeInterface.MakeSelected">
            <summary>
            Makes selected the current node .
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.ITreeNodeInterface.Clear">
            <summary>
            Clears this instance and removes all tree nodes from the collection.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ITreeNodeInterface.Menu">
            <summary>
            Gets the tree current context menu.
            </summary>
            <value>The menu <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ITreeNodeInterface.Nodes">
            <summary>
            Gets the collection of System.Windows.Forms.TreeNode objects assigned to the current tree node.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.TreeNodeCollection"/>that represents the tree 
            nodes assigned to the current tree node.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ITreeNodeInterface.TreeView">
            <summary>
            Gets the parent <see cref="P:CAS.Lib.ControlLibrary.ITreeNodeInterface.TreeView"/> that the tree node is assigned to.
            </summary>
            <value> 
            A <see cref="T:System.Windows.Forms.TreeView"/> that represents the parent 
            tree view that the tree node is assigned to, or null if the node has not been 
            assigned to a tree view.
            </value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.EditorPanel">
            <summary>
            Editor Panel
            </summary>
            <summary>
            Editor Panel - panel on wich GDI+ GUI is displayed
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.EditorPanel.shapes">
            <summary>
            List of the shapes on that editor panel
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.EditorPanel.connections">
            <summary>
            List of the connection on that editor panel
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.EditorPanel.contextMenuStrip">
            <summary>
            context menu of that panel
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.EditorPanel"/> class.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanel.AddConnection(CAS.Lib.ControlLibrary.GDI.HotPoint,CAS.Lib.ControlLibrary.GDI.HotPoint,System.Boolean)">
            <summary>
            Adds the connection.
            </summary>
            <param name="ChildHotpoint">The child hotpoint.</param>
            <param name="ParentHotpoint">The parent hotpoint.</param>
            <param name="DoNotValidate">if set to <c>true</c> the validation of the connection is not performed.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanel.AddShape(CAS.Lib.ControlLibrary.GDI.Shape)">
            <summary>
            Adds the shape.
            </summary>
            <param name="sh">The shape</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanel.ClearConnectionList">
            <summary>
            Clears the connection list.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanel.ClearShapesList">
            <summary>
            Clears the shapes list.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanel.CreateInstanceOfNewConnection(CAS.Lib.ControlLibrary.GDI.HotPoint,CAS.Lib.ControlLibrary.GDI.HotPoint)">
            <summary>
            Creates the instance of new connection.
            </summary>
            <param name="StartOfTheConnection">The start of the connection.</param>
            <param name="EndOfTheConnection">The end of the connection.</param>
            <returns></returns>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.EditorPanel.StatusInfo">
            <summary>
            Gets the status info.
            </summary>
            <value>The status info.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.EditorPanel.Zoom">
            <summary>
            Gets or sets the zoom.
            </summary>
            <value>The zoom.</value>
        </member>
        <member name="E:CAS.Lib.ControlLibrary.GDI.EditorPanel.ZoomIsChanged">
            <summary>
            Occurs when zoom is changed.
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.EditorPanel.StatusInformationClass">
            <summary>
            Status for Editor Panel
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanel.StatusInformationClass.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.EditorPanel.StatusInformationClass.Connecting">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CAS.Lib.ControlLibrary.GDI.EditorPanel.StatusInformationClass"/> is connecting.
            </summary>
            <value><c>true</c> if connecting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.EditorPanel.StatusInformationClass.ShapeIsMoving">
            <summary>
            Gets or sets a value indicating whether [shape is moving].
            </summary>
            <value><c>true</c> if [shape is moving]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.EditorPanel.StatusInformationClass.AdditionalInfo">
            <summary>
            Gets or sets the additional info.
            </summary>
            <value>The additional info.</value>
        </member>
        <member name="E:CAS.Lib.ControlLibrary.GDI.EditorPanel.StatusInformationClass.InfoIsChanged">
            <summary>
            Occurs when information is changed.
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.About">
            <summary>
            Component shows CAS about information
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.About.#ctor">
            <summary>
            Component shows CAS about information
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.About.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.About.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.About.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.About.SetAssemblyLabel">
            <summary>
            Allows do show on the about window the assembly full name.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.About.SetUser">
            <summary>
            Displays name of the product license owner
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.About.SetProductIcon">
            <summary>
            Displays the product image on the about window
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.LogMessageWindow">
            <summary>
            Window to dispaly information
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.LogMessageWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.LogMessageWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.LogMessageWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.LogMessageWindow.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.LogMessageWindow.#ctor(System.String)">
            <summary>
            constructor
            <param name="message">message to be shouwn</param>
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.LogMessageWindow.SetLogMessage(System.String)">
            <summary>
            this function sets the log message
            </summary>
            <param name="message">message to be shouwn</param>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectableArray">
            <summary>
            Array of HotPointSelectableConnectable
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectableArray.DeselectAll">
            <summary>
            Deselects all hotpoints.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectableArray.Draw(System.Drawing.Graphics,CAS.Lib.ControlLibrary.GDI.GraphicsSettings)">
            <summary>
            Draws the object on the specified dc.
            </summary>
            <param name="dc">The DeviceContext.</param>
            <param name="MyGraphicsSettings">The graphics settings.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectableArray.MatchAndSelect(System.Drawing.Point)">
            <summary>
            Matches and selects the hotpoint. 
            This function checks whether one of the hotpoints is clicked and if yes the hotpoint is selected.
            </summary>
            <param name="point">The point that is clicked.</param>
            <returns></returns>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectableArray.SelectedHotpoint">
            <summary>
            Gets the selected hotpoint.
            </summary>
            <value>The selected hotpoint.</value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectable">
            <summary>
            HotPoint that can be selected and connected
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectable.#ctor(CAS.Lib.ControlLibrary.GDI.ShapeWithHotpoints,System.Drawing.Point,System.Drawing.Size,System.Boolean,System.Boolean,CAS.Lib.ControlLibrary.GDI.HotpointType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectable"/> class.
            </summary>
            <param name="parrent">The parrentshape.</param>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <param name="IsHorizontal">if set to <c>true</c> [is horizontal].</param>
            <param name="IsFixed">if set to <c>true</c> [is fixed].</param>
            <param name="Type">The type.</param>
            <param name="NumberInParentShape">The number in parent shape.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectable.Draw(System.Drawing.Graphics,CAS.Lib.ControlLibrary.GDI.GraphicsSettings)">
            <summary>
            Draws the object on the specified dc.
            </summary>
            <param name="dc">The DeviceContext.</param>
            <param name="MyGraphicsSettings">The graphics settings.</param>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectable.IsSelected">
            <summary>
            Gets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.HotPointSelectableConnectable.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.EditorPanelForm">
            <summary>
            Form that contains Editor Panel
            </summary>
            <summary>
            Form that contains Editor Panel
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.EditorPanelForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanelForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanelForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.EditorPanelForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.EditorPanelForm"/> class.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.EditorPanelForm.EditorPanel">
            <summary>
            Gets the editor panel.
            </summary>
            <value>The editor panel.</value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.DebugWindow">
             <summary>
             Debug window - standard window for debugging output
             
             
             usage:
             <![CDATA[
            private DebugWindow debugWindow=null;
            private void debugWindowToolStripMenuItem_Click(object sender, EventArgs e)
            {
              if (debugWindowToolStripMenuItem.Checked && debugWindow!=null)
              {
                debugWindow.Close();
                debugWindowToolStripMenuItem.Checked = false;
              }
              else
              {
                if(debugWindow==null || debugWindow.IsDisposed)
                {
                  debugWindow=new DebugWindow(this.Icon , 
                    new FormClosingEventHandler( debugWindow_FormClosing));
                }
                debugWindow.Show();
                debugWindowToolStripMenuItem.Checked = true;
              }
            }
            ]]>
             </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.DebugWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.DebugWindow"/> class.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.DebugWindow.#ctor(System.Drawing.Icon,System.Windows.Forms.FormClosingEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.DebugWindow"/> class.
            </summary>
            <param name="icon">The icon.</param>
            <param name="debugWindow_FormClosing">The debug window form closing handler.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.DebugWindow.AppendToLog(System.String)">
            <summary>
            Appends to log.
            </summary>
            <param name="StringToBeAppended">The string to be appended.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.DebugWindow.AppendToLogLine(System.String)">
            <summary>
            Appends to log as line.
            </summary>
            <param name="StringLineToBeAppended">The string line to be appended.</param>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.DebugWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.DebugWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.DebugWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.TextEditPanel">
            <summary>
            Panel to edit text
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.TextEditPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.TextEditPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.TextEditPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.TextEditPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.TextEditPanel"/> class.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.TextEditPanel.AddControlsToToolStrip(System.Windows.Forms.ToolStripItem[])">
            <summary>
            Adds the controls to tool strip.
            </summary>
            <param name="ToolStripItems">The tool strip items.</param>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.TextEditPanel.EditedText">
            <summary>
            Gets or sets the edited text.
            </summary>
            <value>The edited text.</value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.OKCnacelForm">
            <summary>
            Form allowing to modify properties of new created object.
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.OKCnacelForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.OKCnacelForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.OKCnacelForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.OKCnacelForm.#ctor">
            <summary>
            Default creator of the object
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.OKCnacelForm.#ctor(System.String)">
            <summary>
            constructor with new title
            </summary>
            <param name="formname">new title for the form</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.OKCnacelForm.CanBeAccepted(System.Boolean)">
            <summary>
            Can Be Accepted
            </summary>
            <param name="pOKState"></param>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.OKCnacelForm.SetUserControl">
            <summary>
            Sets the reference of the object to be modified.
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.ImportFileControll">
            <summary>
            Controll That is responsible for selecting file to import
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.ImportFileControll.#ctor(CAS.Lib.ControlLibrary.ImportFileControll.ImportInfo,CAS.Lib.RTLib.ICanBeAccepted)">
            <summary>
            Constructor for the import File Dialog
            </summary>
            <param name="_info">object <see cref="T:CAS.Lib.ControlLibrary.ImportFileControll.ImportInfo"/> that contains all setting for this import tool</param>
            <param name="_canbeaccepted">this is link ti the main window to enable ok button if settings are correct. 
            Pleas see <see cref="T:CAS.Lib.RTLib.ICanBeAccepted"/></param>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.ImportFileControll.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.ImportFileControll.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.ImportFileControll.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.ImportFileControll.ImportInfo">
            <summary>
            abstract class that contains main data for the form and import settings
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ImportFileControll.ImportInfo.ImportName">
            <summary>
            the name for that import
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ImportFileControll.ImportInfo.InitialDirectory">
            <summary>
            default directory for importing file
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ImportFileControll.ImportInfo.BrowseFilter">
            <summary>
            deafult browse filter for the dialog which is used for selecting a file
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ImportFileControll.ImportInfo.DefaultExt">
            <summary>
            deafult extension for the dialog which is used for selecting a file
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ImportFileControll.ImportInfo.InformationText">
            <summary>
            text that is used to show the information about this importing function
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.ImportFileControll.ImportInfo.Filename">
            <summary>
            selected filename
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.Connection">
            <summary>
            Connection class - class that displays connection between shapes
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.Connection.MarginSize">
            <summary>
            The size of the margin
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Connection.ExchangeBeginningWithEnd">
            <summary>
            Exchanges the beginning with end.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Connection.Validate">
            <summary>
            Validates this instance. 
            This fuction checks whether this connection is valid. this function should be overriden by child class
            to achieve the validation that depend on the child.
            </summary>
            <returns>true if the connection is valid</returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Connection.Match(System.Drawing.Point)">
            <summary>
            test if the connection matches the specified point.
            </summary>
            <param name="Point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Connection.#ctor(CAS.Lib.ControlLibrary.GDI.HotPoint,CAS.Lib.ControlLibrary.GDI.HotPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:CAS.Lib.ControlLibrary.GDI.Connection"/> class.
            </summary>
            <param name="StartHotpoint">The start hotpoint.</param>
            <param name="EndHotpoint">The end hotpoint.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GDI.Connection.Draw(System.Drawing.Graphics,CAS.Lib.ControlLibrary.GDI.GraphicsSettings)">
            <summary>
            Draws the object on the specified dc.
            </summary>
            <param name="dc">The DeviceContext.</param>
            <param name="MyGraphicsSettings">The graphics settings.</param>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.Connection.StartHotpoint">
            <summary>
            Gets the start hotpoint.
            </summary>
            <value>The start hotpoint.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.Connection.EndHotpoint">
            <summary>
            Gets the end hotpoint.
            </summary>
            <value>The end hotpoint.</value>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GDI.Connection.CAS#Lib#ControlLibrary#GDI#IIsSelected#IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GenericTreeNode`2">
            <summary>
            Generic and disposable <see cref="T:System.Windows.Forms.TreeNode"/>
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.AddToolStripMenuItemArray(System.Windows.Forms.ToolStripMenuItem[])">
            <summary>
            Adds the tool strip menu items to array.
            </summary>
            <param name="ArrayOfToolStripMenuItem">The array of tool strip menu items.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.AssignImageIndex">
            <summary>
            Assigns the index of the image.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.#ctor(System.String,`0,`1)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="text">The label <see cref="P:System.Windows.Forms.TreeNode.Text"/> of the new tree node.</param>
            <param name="obj">The object coupled with the node.</param>
            <param name="node">The node to add new object.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="text">The label <see cref="P:System.Windows.Forms.TreeNode.Text"/> of the new tree node.</param>
            <param name="obj">The object coupled with the node.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.GetMenuItems">
            <summary>
            Gets the menu items.
            A node should return the items for the context menu that allow to perform any operation on the node.
            </summary>
            <returns>the menu items</returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.MakeSelected">
            <summary>
            Makes selected the current node .
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.Clear">
            <summary>
            Disposes and removes all tree nodes from the collection.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Do not make this method virtual. A derived class should not be able to override this method.</remarks>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.Dispose(System.Boolean)">
            <summary>
            Recursively searches the tree and free objects.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.DisposeChildren">
            <summary>
            Disposes the children.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:CAS.Lib.ControlLibrary.GenericTreeNode`2"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.CAS#Lib#ControlLibrary#ITreeNodeInterface#get_Nodes">
            <summary>
            Generic and disposable <see cref="T:System.Windows.Forms.TreeNode"/>
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.GenericTreeNode`2.CAS#Lib#ControlLibrary#ITreeNodeInterface#get_TreeView">
            <summary>
            Generic and disposable <see cref="T:System.Windows.Forms.TreeNode"/>
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GenericTreeNode`2.Menu">
            <summary>
            Gets the tree current context menu.
            </summary>
            <value>The menu <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.</value>
            <remarks>Implements <see cref="T:CAS.Lib.ControlLibrary.ITreeNodeInterface"/></remarks>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GenericTreeNode`2.Parent">
            <summary>
            Gets the parent tree node of the current tree node.
            </summary>
            <value>Parent <see cref="T:System.Windows.Forms.TreeNode"/></value>
            <returns>A <see cref="T:System.Windows.Forms.TreeNode"/> that represents the parent of the current tree node.</returns>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.GenericTreeNode`2.Tag">
            <summary>
            Gets or sets the object that contains data about the tree node.
            </summary>
            <value></value>
            <returns>An uset OPCType object that contains data about the tree node. The default is null.</returns>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.GDI.HotpointType">
            <summary>
            Hotpoint type enum
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.HotpointType.Left">
            <summary>
            left input
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.HotpointType.Right">
            <summary>
            rgiht input
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.HotpointType.Top">
            <summary>
            top input
            </summary>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.GDI.HotpointType.Bottom">
            <summary>
            bottom input
            </summary>
        </member>
        <member name="T:CAS.Lib.ControlLibrary.AboutLicenseForm">
            <summary>
            About License Form 
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.AboutLicenseForm.#ctor(System.Drawing.Image,System.String,System.Reflection.Assembly)">
            <summary>
            Form shows CAS about information
            </summary>
            <param name="productImage">Icon of the product </param>
            <param name="cLicenseOwner">Owner name of the product license.</param>
            <param name="cassembly">Assembly the about form is for.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.AboutLicenseForm.GetMsinfo32Path(System.String@)">
            <summary>
            Taken from http://www.codeproject.com/miscctrl/hyperlink.asp
            </summary>
            <param name="strPath"></param>
            <returns></returns>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.AboutLicenseForm.StartSysInfo(System.String)">
            <summary>
            Taken from: http://www.codeproject.com/miscctrl/hyperlink.asp
            </summary>
            <param name="strSysInfo"></param>
        </member>
        <member name="F:CAS.Lib.ControlLibrary.AboutLicenseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.AboutLicenseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CAS.Lib.ControlLibrary.AboutLicenseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CAS.Lib.ControlLibrary.AboutLicenseForm.SetAdditionalControl">
            <summary>
            Adds an additional control.
            </summary>
            <value>The set additional control.</value>
        </member>
    </members>
</doc>
