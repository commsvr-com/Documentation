<?xml version="1.0" encoding="UTF-8"?>
<topic id="e34055b2-23e0-4f1a-9e00-52d75becaeec" revisionNumber="1">
  <developerOrientationDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <summary>
      <para>
      Welcome to the world of <token>OPCUA</token> <token>AS</token>.
    </para>
    </summary>
    <introduction>
      <para>
      There is no doubt that information technology and process control engineering have to be integrated to benefit from macro
      optimization and synergy effect. The only question is how to do this. A new emerging standard from OPC Foundation is a proposal
      to address this challenge. The OPC Unified Architecture is a set of specifications applicable to manufacturing software in
      application areas such as Field Devices, Control Systems, Manufacturing Execution Systems and Enterprise Resource Planning Systems.
      These systems are intended to exchange information and to use command and control for industrial processes.
      The <token>OPCUA</token> defines a common infrastructure model to facilitate this information exchange.
    </para>
      <para>
      Industrial process management requires information of two types: process data and metadata. Metadata is a favorite keyword of
      the IT community because it sounds more seriously than "data describing data". The same way as process data represents the process
      physical state, metadata describes the process itself and in the <token>OPCUA</token> it is represented as <token>AS</token>.
    </para>
      <para>
      The <token>AS</token> is intended to support integration by building common discipline, i.e. semantics (knowledge base) and
      vocabulary - finally a language good enough to convey information up and down between levels of competence. If the parties want
      to speak only, they do not need to know languages they use. It makes difference if we are going to talk to each other and we
      can say that we are making the communicating parties interoperable. In other words, it is not enough to hear(transfer data),
      we have to understand (how to interpret it). Without mutual understanding the voice is only an unpleasant noise. Unfortunately,
      talking about the same we can use two different languages: colloquial and formal ones. An expert will say that the colloquial
      language is ambiguous and cannot be used to convey more important information, and therefore should be avoided – I agree.
      Beginners probably will complain that a very precise and knowledgeable incomprehensible sentence is only bullshit – I agree too.
    </para>
      <para>
      The <token>AS</token> is a language, because it provides alphabet, syntax and semantic. The language is specific, because it is to
      be used to describe a real-time process. It is also computer centric, because it allows exchanging information between systems used
      to control industrial processes. Unfortunately, building completely unmanned systems is still science-fiction today. In spite
      of effort spent on teaching machines our native language, we are unable yet to have a chat with them. Therefore learning the
      <token>AS</token> now seems to be an inevitable process. It is inevitable, but a question arises for whom. Because it is to
      be used for systems integration, the process involves plant people working at one level (responsible for process control)
      and corporate people working at another level (responsible for process management). Additionally, both communities are waiting
      for software tools developed by IT vendors that expand the population speaking the Address Space native language. The good news is
      that it is not a spoken language, only writing ability is expected.
    </para>
      <para>
      The last but not least question we have to address is if we really need a new dedicated language to read for example a drum
      temperature – it is just a simple number. Of course the answer is no. But if at the same time we need to know that the
      process consists of two drums connected by a pipe and the temperature of the first one is closely coupled with the temperature of
      the other one, the answer becomes not so obvious. Recognizing also the fact that we have to deal with two kinds of information:
    </para>
      <list class="bullet">
        <listItem>
          <para>
          Static, e.g. nominal temperature and permanent connection
        </para>
        </listItem>
        <listItem>
          <para>
          Dynamic, e.g. current temperature and configuration of a valves, drums
        </para>
        </listItem>
      </list>
      <para>
      it becomes clear that the Address Space concept has no competitors now and, therefore, we have no options in this respect and
      the only subject for further discussion is how to learn it. The bad news is that using <token>AS</token> terminology the same
      information can be expressed by an almost unlimited number of means. Additionally, as usual when learning languages including
      the native one, the process is continuous and we can only talk about improving the language knowledge, because designing
      a model for the real-time process we must apply the best practice in addition to syntax and semantic. In other words, to be
      able to write not only a simple email but also a popular novel we have to couple the learning with training processes.
    </para>
    </introduction>
    <relatedSections>
      <content>
        <para>
        Introduction to the <token>OPCUA</token></para>
        <para>
          <link xlink:href="c55db7e8-3f15-4556-b8db-12251d39ad0a" />
        </para>
        <para>
        Introduction to the <token>OPCUA</token> <token>AS</token></para>
        <para>
          <link xlink:href="58e663ae-9e77-4a9b-9adc-cbc18c4d7e9e" />
        </para>
        <para>
        Introduction to the <token>OPCUA</token> <token>IM</token></para>
        <para>
          <link xlink:href="3f999f23-4ad7-46a4-80dd-ab33729d5f49" />
        </para>
      </content>
    </relatedSections>
    <relatedTopics>
    </relatedTopics>
  </developerOrientationDocument>
</topic>