<?xml version="1.0" encoding="utf-8"?>
<topic id="1b9d7777-99cc-4059-a57f-124a4d81b498" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
    </introduction>
    <section address="MODBUSRSCommunicationInterfaceSettings">
      <title>Communication interface settings</title>
      <content>
        <mediaLink>
          <caption placement="after" lead="Figure 1">Settings for PC serial COM port</caption>
          <image placement="center" xlink:href = "8ea49359-50e2-480b-bf4d-6746c8e89513"/>
        </mediaLink>
        <para>The following settings for PC serial COM port are default for CommServer:</para>
        <list class="bullet">
          <listItem>
            <para>Baud rate: 9600 bps</para>
          </listItem>
          <listItem>
            <para>Parity: None</para>
          </listItem>
          <listItem>
            <para>Data bits: 8</para>
          </listItem>
          <listItem>
            <para>Stop bit: 1</para>
          </listItem>
        </list>
        <para>It is possible also to use UDP/TCP as transport for Modbus RTU telegrams. If that is the case, select TCP or UDP as protocol. Socket number settings are ignored and can be set by default as –1 (this setting is valid only for slave sides of the protocol).</para>
        <mediaLink>
          <caption placement="after" lead="Figure 2">Using UDP/TCP as transport for Modbus RTU telegrams</caption>
          <image placement="center" xlink:href = "708a7301-1662-48af-992b-5b7a3d7f77ed"/>
        </mediaLink>
      </content>
    </section>
    <section address="MODBUSRSModbusProtocolSettings">
      <title>Modbus protocol settings</title>
      <content>
        <mediaLink>
          <caption placement="after" lead="Figure 3">MODBUS protocol settings</caption>
          <image placement="center" xlink:href = "dd6027b3-eefc-4146-bad8-97e4ef54ba95"/>
        </mediaLink>
        <para>CommServer allows us to tune the timeout settings that are used in the Modbus DataProvider. The following settings are available:</para>
        <list class="bullet">
          <listItem>
            <para>
              <legacyItalic>InterframeGap</legacyItalic> - period of time in milliseconds between consecutive request frames
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyItalic>MaxNumberOfRetries</legacyItalic> - maximal number of retries getting the response. After this limit has passed the base station finds that communication with the device using current interface coupled with this protocol is broken and it activates the next interface in the pipe if available. The failed interface is marked inactive and will remain in this state until the defined (as “inactive time after failed”) timeout expiration.
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyItalic>ResponseTimeOut</legacyItalic> - maximal time of waiting for the response from a remote device
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyItalic>Timeout15</legacyItalic> - maximal wait time in microseconds for the next character inside Modbus telegram (Modbus specifications defines this time as time of 1.5 character that goes through the communication layer, but due to Windows limitation it is not recommended to set this timeout to less than 11 milliseconds)
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyItalic>Timeout35</legacyItalic> - maximal wait time for the next character while waiting for the response frame end (a silent interval separating message frames, e.g. 3.5 character times for Modbus)
            </para>
          </listItem>
        </list>
        <alert>
          <para>The default settings are optimal for communication over the serial link; if TCP/UDP transportation it is recommended to tune the settings.</para>
        </alert>
        <alert>
          <para>If TCP/UDP transportation is used it is necessary to set a valid segment address. This address is the address of the remote server that we want to connect to. Below there is an example of connection settings to PortServer One TS from DIGI company. In this case TCP is used:</para>
          <mediaLink>
            <caption placement="after" lead="Figure 4">Example of connection settings to PortServer One TS from DIGI company</caption>
            <image placement="center" xlink:href = "88666bf0-886e-41e0-9545-51cbfb11ca72"/>
          </mediaLink>
        </alert>
        <para>The syntax of the segment address is:</para>
        <para><![CDATA[server_IP_address:port_to_which_commserver_establish_the_connection]]></para>
        <para>In the figure below there is an example connection to PortServer One TS, whose IP address is 192.168.0.8 and communication port is 2101:</para>
        <mediaLink>
          <caption placement="after" lead="Figure 5">Example connection to PortServer One TS</caption>
          <image placement="center" xlink:href = "029ff583-8ac3-4838-b344-d86f36a62adb"/>
        </mediaLink>
      </content>
    </section>
    <section address="MODBUSRSConfigurationAndInterpretationOfReceivedData">
      <title>Configuration and interpretation of received data</title>
      <content>
        <para>Modbus DataProvider reads the data in blocks. Requests are sent to the device (called station in the CommServer configuration) that has an address (according to Modbus protocol) set inside port (interface) definition. The user can freely define a block of data to be read. The block of data is received as an answer from the device.</para>
        <para>During the configuration of the data block, the following settings must be configured:</para>
        <list class="bullet">
          <listItem>
            <para>Address – the initial address of the block</para>
          </listItem>
          <listItem>
            <para>Data Type – the address space in the device to be read (available address spaces are: Coils, Discrete Inputs, Holding Registers, Input Registers, Memory Bank Registers , 8 bits Holding Registers )</para>
          </listItem>
          <listItem>
            <para>Name – the name of the data block in the CommServer configuration (not used during communication)</para>
          </listItem>
          <listItem>
            <para>Tags collection – tags definitions inside the block. Each tag has:</para>
            <list class="bullet">
              <listItem>
                <para>Name – the name of the tag inside the OPC server address space</para>
              </listItem>
              <listItem>
                <para>Access Rights - indicate if this item is read only, write only or read/write. This is NOT related to security but rather to the nature of the underlying hardware</para>
              </listItem>
              <listItem>
                <para>DataTypeConversion - conversion requirements. Data will be available in the required type (if conver-sion is possible).</para>
              </listItem>
            </list>
          </listItem>
        </list>
      </content>
    </section>
    <section address="MODBUSRSAddressingInModbusAddressVsOffset">
      <title>Addressing in Modbus: address vs offset (reference)</title>
      <content>
        <para>In Modbus protocol, the block address indicates the offset of a particular element within its address space (e.g. holding register, coils, etc.), but this offset may not be equal to physical address of this element in the memory. An example of such situation is a Modicon 984 controller, where:</para>
        <list class="bullet">
          <listItem>
            <para>Register at reference 0 is address 40001 in Modicon 984</para>
          </listItem>
          <listItem>
            <para>Coil at reference 0 is address 00001 in Modicon 984</para>
          </listItem>
        </list>
        <para>That’s why sometimes it is necessary to change the address to offset (e.g. subtract 40001 when a Holding Register is concerned) and finally the offset (not address) must be inserted to the CommServer block configuration.</para>
      </content>
    </section>
    <section address="MODBUSRS32bitRegisterAndFloatingPointNumbersExtension">
      <title>32-bit register and floating point numbers extension</title>
      <content>
        <para>The Modbus DataProvider supports also some extension to Modbus protocol, e.g.:</para>
        <list class="bullet">
          <listItem>
            <para>32-bit Holding Register</para>
          </listItem>
          <listItem>
            <para>Floating point values</para>
          </listItem>
        </list>
        <para>In Modbus, a 32-bit register is transmitted as two standard (16-bit) registers. There are two modes of how 32-bit registers are transmitted. In the first mode (usually called Modicon), the first register contains bits 15 - 0 of the 32-bit number, and the second register contains bits 31 - 16 of the 32-bit number. In the second mode (called inverted), the order of those two registers is inverted. The Modbus DataProvider supports both modes and the mode can be selected in DataProvider settings in the RegisterOrderIn32mode property (see figure below).</para>
        <para>In case of the necessity of using 32-bit Holding Register, a special block data type must be selected: Holding_32bit_Register (see figure below). Note that floating point numbers are available only when 32-bit registers are used</para>
        <para>As far as floating point numbers are concerned, the proper floating point format must be selected. This DataProvider supports two modes: Modicon [standard: the first register contains bits 15 - 0 of the 32-bit number (bits 15 - 0 of significant), and the second register contains bits 31 - 16 of the 32-bit number (exponent and bits 23 - 16 of significant)] and IEEE (inverted: IEEE floating point number format is used). The mode can be selected in DataProvider settings in the FloatingPoint  property (see figure below). What is more, conversion to System.Single must be set for each item that should be available in OPC as floating point number. </para>
      </content>
    </section>
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>