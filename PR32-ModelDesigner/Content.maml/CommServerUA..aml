<?xml version="1.0" encoding="utf-8"?>
<topic id="8792522c-01ff-49f8-ba2a-e3df7abf6140" revisionNumber="1">
  <developerOrientationDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <summary>
      <para>
        Welcome to <token>UACommServer</token> - a key to to manage data transfer using <token>OPCUA</token>.
      </para>
    </summary>
    <introduction>
      <para>
        <token>UACommServer</token> is a package of communication software to manage data transfer.
        It’s a fully configurable <token>OPCUA</token> server that provides a <userInput>multi-protocol</userInput>,
        <userInput>multi-medium</userInput> and <userInput>multi-channel</userInput> redundant access to physical process
        control device data. To ensure short response time and effective utilization of the physical device communication
        channels throughput, a unique scan on demand algorithm was implemented. CommServer software provides:
      </para>
      <list class="bullet">
        <listItem>
          <para>Integration of production supervision systems (MES, SCADA) with management systems of operations and supplies in an enterprise (ERP, SAP, CRM).</para>
        </listItem>
        <listItem>
          <para>Building of communication basing on a uniform standard.</para>
        </listItem>
        <listItem>
          <para>Optimization of communication infrastructure utilization of visualization and supervision systems, e.g.:</para>
          <list class="bullet">
            <listItem>
              <para>Reduction of GPRS broadcast costs by about 80%</para>
            </listItem>
            <listItem>
              <para>Increase of radio communication systems efficiency by over 600%</para>
            </listItem>
          </list>
        </listItem>
        <listItem>
          <para>Considerably easier (cheaper) extension and connection of next objects.</para>
        </listItem>
        <listItem>
          <para>Increase of functionalities and efficiencies of the existing systems.</para>
        </listItem>
        <listItem>
          <para>Creation of OPC UA servers for non-standard (own) protocols.</para>
        </listItem>
      </list>
      <table >
        <title>Main Features</title>
        <row>
          <entry>
            <para>
              Multi-protocols (new protocols can be added by plug-ins)
            </para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              Protocol-independent - ones user has defined the process tags and scanning rules, the protocol
              can be changed easily without any change of the previous configuration
            </para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              Multi-link and redundancy capabilities (physical devices can be accessed using different protocols,
              channels, seg-ments and interfaces coupled together in virtual communication pipes)
            </para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              Advanced polling algorithm - scanning on demand – minimizes utilization of the physical data communication chan-nels
            </para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              Diagnostic information is provided by OPC tags and a management console
            </para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              Implementation of a watchdog mechanism that prevents deadlock in case of faulty configuration or malfunction
            </para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              Significant information are logged in Windows Application Log
            </para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              It takes the advantages of the most recent technology -.NET Framework
            </para>
          </entry>
        </row>
      </table>
      <para></para>
    </introduction>

    <!-- <inThisSection>Optional description of content in this section</inThisSection> -->
    <!-- <reference>Optional reference section</reference> -->
    <!-- <relatedSections>Optional related sections info</relatedSections> -->
    <!-- <externalResources>Optional external resources section</externalResources> -->
    <relatedTopics>
      <externalLink>
        <linkText>CommServerUA product home page</linkText>
        <linkAlternateText>CommServerUA product home page</linkAlternateText>
        <linkUri>http://www.commsvr.com/Products/CommServerUA.aspx</linkUri>
      </externalLink>
      <externalLink>
        <linkText>Download CommServerUA server</linkText>
        <linkAlternateText>Download CommServerUA server</linkAlternateText>
        <linkUri>http://www.commsvr.com/DownloadCenter/ProductSoftware/CommServerUA.aspx</linkUri>
      </externalLink>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerOrientationDocument>
</topic>