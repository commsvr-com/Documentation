<?xml version="1.0" encoding="utf-8"?>
<topic id="f92834d1-163c-4085-be20-7fe85ea6563d" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
    </introduction>
    <section address="Encoding">
      <title>Encoding</title>
      <content>
        <para>The DataType points to an Object of type DataTypeEncodingType. Each DataType can have several data type encodings, for example "Default", "UA Binary" and "XML" encoding. Services in section Services allow clients to request an encoding or choosing the “Default” encoding. Each data type encoding is used by exactly one DataType, that is, it is not permitted for two DataTypes to point to the same data type encoding. The data type encoding Object points to exactly one Variable of type Standard Variable Types. The data type description Variable belongs to a data type dictionary Variable.</para>
          <para>Since the NodeId of the data type encoding will be used in some Mappings to identify the DataType and its encoding.  </para>
          <para>Data type encoding objects of the DataTypes reference their data type descriptions of the Data type dictionaries using HasDescription references. However, servers are not required to provide the inverse References that relate the data type descriptions back to the data type encoding objects. If a DataType Node is exposed in the Address Space, it shall provide its data type encodings and if a data type dictionary is exposed, it should expose all its data type descriptions. Both of these references shall be bi-directional. </para>
      </content>
    </section>
      <section address="EncodingPropertyGridProperties">
          <title>Encoding property grid properties</title>
          <content>
              <mediaLink>
                  <caption placement="after" lead="Figure 1">Encoding property grid</caption>
                  <image placement="center" xlink:href = "0a383baf-bac4-42e0-8b9b-1c724c1829e7"/>
              </mediaLink>
              <para>Encoding properties:</para>
              <list class="ordered">
                  <listItem>
                      <para>Max Cardinality - this attribute indicates the maximum number of possibly existing instances of this element.</para>
                  </listItem>
                  <listItem>
                      <para>Min Cardinality - this attribute indicates the minimum number of possibly existing instances of this element. If the element has minimal cardinality greater than 0, it is possible to check that it exists in the instantiated nodes.</para>
                  </listItem>
                  <listItem>
                      <para>Modeling Rule - dependent on the value of these properties specified for the components of a type they are used to create appropriate instances while the parent type is instantiated in the address space. The default value is Mandatory. In this case the component is always created with the values of the attributes derived from the inheritance chain. If the value is None it indicates that this node only belongs to the type and is not used to create an instance while the parent type is instantiated. If the node is not a type component the value of this property is ignored.</para>
                  </listItem>
                  <listItem>
                      <para>Preserve Default Attributes - the value indicating whether to preserve default attributes.</para>
                  </listItem>
                  <listItem>
                      <para>Type Definition - the type of this instance pointed out by the HasTypeDefinition reference.</para>
                  </listItem>
                  <listItem>
                      <para>Default value – the default value of the Type Definition.</para>
                  </listItem>
                  <listItem>
                      <para>Is Empty - indicates if the Type Definition is empty.</para>
                  </listItem>
                  <listItem>
                      <para>Name – the name of the TypeDefinition.</para>
                  </listItem>
                  <listItem>
                      <para>Namespace – a namespace that qualifies the name of the TypeDefinition.</para>
                  </listItem>
                  <listItem>
                      <para>Browse Name - the name used in the information model.  The validator will create the BrowseName automatically from the SymbolicName. The BrowseName is qualified by the namespace used for the SymbolicName. </para>
                  </listItem>
                  <listItem>
                      <para>Description – optionally, a vendor specific description is provided. The validator automatically creates a generic Description from the BrowseName and NodeClass. </para>
                  </listItem>
                  <listItem>
                      <para>Key – an optional key that can be used to look up the Description for other locales in a resource DB.</para>
                  </listItem>
                  <listItem>
                      <para>Value – the value of the Description attribute for the Node.</para>
                  </listItem>
                  <listItem>
                      <para>Display Name – a human readable name for the Node. The validator automatically creates the DisplayName from the BrowseName.</para>
                  </listItem>
                  <listItem>
                      <para>Key – an optional key that can be used to look up the display name for other locales in a resource DB.</para>
                  </listItem>
                  <listItem>
                      <para>Value – the value of the Display Name.</para>
                  </listItem>
                  <listItem>
                      <para>IsDeclaration - this flag indicates that the Node is defined elsewhere and no code will be generated. Nodes that are declarations do not need to be completely defined. They only need to have the information required to generate code for nodes that reference it (e.g. the BaseType).</para>
                  </listItem>
                  <listItem>
                      <para>StringId - an alternate unique identifier for the node. It is used instead of the NumericId if it is specified in the CSV input file.</para>
                  </listItem>
                  <listItem>
                      <para>Symbolic Name  - identifies the Node within the ModelDesign or within the containing Node. The SymbolicName should always be specified. It is used to create the BrowseName and SymbolicId if they are not specified.</para>
                  </listItem>
                  <listItem>
                      <para>Is Empty - indicates whether the Symbolic Name is empty.</para>
                  </listItem>
                  <listItem>
                      <para>Name – a name, which is apart of the Symbolic Name.</para>
                  </listItem>
                  <listItem>
                      <para>Namespace – a namespace, which qualifies the Name from the Symbolic Name.</para>
                  </listItem>
                  <listItem>
                      <para>Write access – a bit mask that indicates, which attributes are writeable. Optionally the WriteMask Attribute can be provided. If the WriteMask Attribute is provided, it shall set all Attributes to not writeable that are not said to be vendor-specific. For example, the Description Attribute may be set to writeable since a Server may provide a server-specific description for the Node. The NodeId shall not be writeable, because it is defined for each Node in specification.</para>
                  </listItem>
                  <listItem>
                      <para>Supports events - the value indicating whether the Object class node supports events.</para>
                  </listItem>
              </list>
          </content>
      </section>
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>