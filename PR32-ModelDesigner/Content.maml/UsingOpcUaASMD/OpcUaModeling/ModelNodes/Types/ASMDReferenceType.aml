<?xml version="1.0" encoding="utf-8"?>
<topic id="201c8c7c-d06a-4631-9733-57996bfac80c" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
    </introduction>
    <section address="ReferenceType">
      <title>Reference Type</title>
      <content>
        <para>References are defined as instances of ReferenceType nodes. ReferenceType nodes are visible in the Address Space. In contrast, a Reference is an inherent part of a Node and no node class is used to represent references.</para>
      </content>
    </section>
      <section address="ReferenceTypePropertGridDescription">
          <title>ReferenceType property grid description</title>
          <content>
              <mediaLink>
                  <caption placement="after" lead="Figure 1">ReferenceType property grid</caption>
                  <image placement="center" xlink:href = "78e6f503-0de1-4036-880b-bc66de3beaab"/>
              </mediaLink>
              <para>ReferenceType properties:</para>
              <list class="ordered">
                  <listItem>
                      <para>Browse Name - the name used in the information model.  The validator will create the BrowseName automatically from the SymbolicName. The BrowseName is qualified by the namespace used for the SymbolicName. </para>
                  </listItem>
                  <listItem>
                      <para>Description – optionally, a vendor specific description is provided. The validator automatically creates a generic Description from the BrowseName and NodeClass. </para>
                  </listItem>
                  <listItem>
                      <para>Key – an optional key that can be used to look up the Description for other locales in a resource DB.</para>
                  </listItem>
                  <listItem>
                      <para>Value – the value of the Description attribute for the Node</para>
                  </listItem>
                  <listItem>
                      <para>Display Name – a human readable name for the Node. The validator automatically creates the DisplayName from the BrowseName.</para>
                  </listItem>
                  <listItem>
                      <para>Key – an optional key that can be used to look up the display name for other locales in a resource DB.</para>
                  </listItem>
                  <listItem>
                      <para>Value – the value of the Display Name.</para>
                  </listItem>
                  <listItem>
                      <para>IsDeclaration - this flag indicates that the Node is defined elsewhere and no code will be generated. Nodes that are declarations do not need to be completely defined. They only need to have the information required to generate code for nodes that reference it (e.g. the BaseType).</para>
                  </listItem>
                  <listItem>
                      <para>StringId - an alternate unique identifier for the node. It is used instead of the NumericId if it is specified in the CSV input file.</para>
                  </listItem>
                  <listItem>
                      <para>Symbolic Name  - identifies the Node within the ModelDesign or within the containing Node. The SymbolicName should always be specified. It is used to create the BrowseName and SymbolicId if they are not specified.</para>
                  </listItem>
                  <listItem>
                      <para>Is Empty - indicates whether the Symbolic Name is empty.</para>
                  </listItem>
                  <listItem>
                      <para>Name – a name, which is a part of the Symbolic Name.</para>
                  </listItem>
                  <listItem>
                      <para>Namespace – a namespace, which qualifies the Name from the Symbolic Name.</para>
                  </listItem>
                  <listItem>
                      <para>Write access - a bit mask that indicates, which attributes are writeable. Optionally the WriteMask Attribute can be provided. If the WriteMask Attribute is provided, it shall set all Attributes to not writeable that are not said to be vendor-specific. For example, the Description Attribute may be set to writeable since a Server may provide a server-specific description for the Node. The NodeId shall not be writeable, because it is defined for each Node in specification.</para>
                  </listItem>
                  <listItem>
                      <para>Inverse Name - an inverse name of the Reference, i.e. the meaning of the ReferenceType as seen from the TargetNode.</para>
                  </listItem>
                  <listItem>
                      <para>Symmetric - a boolean Attribute with the following values: TRUE the meaning of the ReferenceType is the same as seen from both the SourceNode and the TargetNode; FALSE the meaning of the ReferenceType as seen from the TargetNode is the inverse of that as seen from the SourceNode.</para>
                  </listItem>
                  <listItem>
                      <para>Base Type - the name of the base type pointed out by the HasSubtype reference. The semantic of the HasSubtype type is to express a subtype relationship of types</para>
                  </listItem>
                  <listItem>
                      <para>Default value – a default BaseType.</para>
                  </listItem>
                  <listItem>
                      <para>Is Empty - indicates if there is no Base Type.</para>
                  </listItem>
                  <listItem>
                      <para>Name - BaseType name.</para>
                  </listItem>
                  <listItem>
                      <para>Namespace – a namespace that qualifies the BaseType name. </para>
                  </listItem>
                  <listItem>
                      <para>Class name - a name for the instance of the type. If not specified the validator creates it by removing the 'Type' suffix from the SymbolicName for the Node.</para>
                  </listItem>
                  <listItem>
                      <para>Is Abstract - indicates whether this type is abstract.</para>
                  </listItem>
                  <listItem>
                      <para>No Class Generation - indicates whether to suppress class generation for the type.</para>
                  </listItem>
              </list>
          </content>
      </section>
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>