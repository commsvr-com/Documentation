<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModelForHelp</name>
    </assembly>
    <members>
        <member name="T:CAS.UA.Model.Designer.Nodes.Design`1">
            <summary>
            Base Design class
            </summary>
            <typeparam name="T">Class from Opc UA Model Designer</typeparam>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.ModelDesign">
             <summary>
            The primary objective of the OPC UA AddressSpace is to provide a standard way 
            for servers to represent Objects to clients. 
            The OPC UA Object Model has been designed to meet this objective. 
            It defines Objects in terms of Variables and Methods. 
            It also allows relationships to other Objects to be expressed. 
            The elements of this model are represented in the AddressSpace as Nodes. 
            Each Node is assigned to a NodeClass and each NodeClass represents a different 
            element of the Object Model. 
             </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.ModelDesign.TargetNamespace">
            <summary>
            Gets or sets the target namespace.
            </summary>
            <value>The target namespace.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.ModelDesign.TargetXmlNamespace">
            <summary>
            Gets or sets the target XML namespace.
            </summary>
            <value>The target XML namespace.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.ModelDesign.DefaultLocale">
            <summary>
            Gets or sets the default locale.
            </summary>
            <value>The default locale.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.Namespace">
            <summary>
            In general, a namespace is an abstract container providing context for the items 
              it holds and allowing disambiguation of items having the same name (residing in different namespaces).
              As a rule, names in a namespace cannot have more than one meaning, that is, two or more things cannot share the same name. 
              A namespace is also called a context, as the valid meaning of a name can change depending on what namespace applies. 
              Names in it can represent objects as well as concept, whether it is a natural or ethnic language, 
              a constructed language, the technical terminology of a profession, a dialect, a sociolect, or an artificial language (e.g., a programming language).
            </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Namespace.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Namespace.Prefix">
            <summary>
            Gets or sets the prefix.The Prefix is the C# namespace which qualifies the generated types.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Namespace.InternalPrefix">
            <summary>
            Gets or sets the internal prefix.The InternalPrefix is an optional C# namespace which qualifies the generated types used only by the server.
            </summary>
            <value>The internal prefix.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Namespace.XmlNamespace">
            <summary>
            Gets or sets the XML namespace.
            </summary>
            <value>The XML namespace.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Namespace.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.Reference">
            <summary>
            Defines a reference between two nodes.
            </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Reference.ReferenceType">
            <summary>
            Gets or sets the type of the reference.
            </summary>
            <value>The type of the reference.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Reference.TargetId">
            <summary>
            Gets or sets the target id.
            </summary>
            <value>The target id.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Reference.IsInverse">
            <summary>
            Gets or sets a value indicating whether this instance is inverse (the  value indicating whether this instance is inverse).
            </summary>
            <value>
            	<c>true</c> if this instance is inverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Reference.IsOneWay">
            <summary>
            Gets or sets a value indicating whether this instance is one way.
            </summary>
            <value>
            	<c>true</c> if this instance is one way; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.Parameter">
            <summary>
            Defines a Field in a DataType or Argument of a Method.
            </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Parameter.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Parameter.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Parameter.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Parameter.IdentifierSpecified">
            <summary>
            Gets or sets a value indicating whether [identifier specified].
            </summary>
            <value><c>true</c> if [identifier specified]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Parameter.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.Parameter.ValueRank">
            <summary>
            Gets or sets the value rank.
            </summary>
            <value>The value rank.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.MethodDesign">
            <summary>
            Defines the a Method in the information model.
            </summary>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.InstanceDesign`1">
            <summary>
            A base type for all Instance Nodes (Object, Variable, and Method).
            </summary>
            <typeparam name="T">Class from Opc UA Model Designer</typeparam>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.NodeDesign`1">
            <summary>
            Base class for all based on the BaseNode 
            </summary>
            <typeparam name="T">Class from Opc UA Model Designer</typeparam>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.BrowseName">
            <summary>
            Gets or sets the name of the browse.The BrowseName is the name used in the information model. 
             The validator will create the BrowseName automatically from the SymbolicName.
             The BrowseName is qualified by the namespace used for the SymbolicName.
            </summary>
            <value>The name of the browse.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.The DisplayName is a LocalizedText. 
            Each server shall provide the DisplayName identical to the BrowseName of the Node for the LocaleId "en". 
            Whether the server provides translated names for other LocaleIds is vendor specific.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description. Optionally a vendor specific description is provided: The Description value of the Description attribute for the Node. 
            This element includes an optional key that can be used to look up the Description for other 
            locales in a resource DB. The validator automatically creates a generic Description from the 
            BrowseName and NodeClass. </value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.SymbolicName">
            <summary>
            Gets or sets the name of the symbolic.
            </summary>
            <value>The name of the symbolic.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.SymbolicId">
            <summary>
            Gets or sets the symbolic id.
            </summary>
            <value>The symbolic id.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.IsDeclaration">
            <summary>
            Gets or sets a value indicating whether this instance is declaration.
            </summary>
            <value>
            	<c>true</c> if this instance is declaration; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.NumericId">
            <summary>
            Gets or sets the numeric id.
            </summary>
            <value>The numeric id.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.NumericIdSpecified">
            <summary>
            Gets or sets a value indicating whether [numeric id specified].
            </summary>
            <value><c>true</c> if [numeric id specified]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.StringId">
            <summary>
            Gets or sets the string id.
            </summary>
            <value>The string id.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.NodeDesign`1.WriteAccess">
            <summary>
            Gets or sets the write access.
            </summary>
            <value>The write access.Optionally the WriteMask Attribute can be provided. 
            If the WriteMask Attribute is provided, it shall set all Attributes to 
            not writeable that are not said to be vendor-specific. 
            For example, the Description Attribute may be set to writeable 
            since a Server may provide a server-specific description for the Node. 
            The NodeId shall not be writeable, because it is defined for each Node 
            in this specification. </value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.InstanceDesign`1.ReferenceType">
            <summary>
            Gets or sets the type of the reference.
            </summary>
            <value>The type of the reference.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.InstanceDesign`1.Declaration">
            <summary>
            Gets or sets the declaration.
            </summary>
            <value>The declaration.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.InstanceDesign`1.TypeDefinition">
            <summary>
            Gets or sets the type definition.
            </summary>
            <value>The type definition.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.InstanceDesign`1.ModellingRule">
            <summary>
            Gets or sets the modelling rule.
            </summary>
            <value>The modelling rule.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.InstanceDesign`1.MinCardinality">
            <summary>
            Gets or sets the min cardinality.
            </summary>
            <value>The min cardinality.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.InstanceDesign`1.MaxCardinality">
            <summary>
            Gets or sets the max cardinality.
            </summary>
            <value>The max cardinality.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.InstanceDesign`1.PreserveDefaultAttributes">
            <summary>
            Gets or sets a value indicating whether [preserve default attributes].
            </summary>
            <value>
            	<c>true</c> if [preserve default attributes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.MethodDesign.NonExecutable">
            <summary>
            Gets or sets a value indicating whether [non executable].
            </summary>
            <value><c>true</c> if [non executable]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.TypeDesign`1">
            <summary>
            A base type for all Type Nodes (ObjectType, VariableType, DataType and ReferenceType).
            </summary>
            <typeparam name="T">Type of the node from the Opc.Ua.ModelDesigner namespace, 
            must inherit <see cref="T:Opc.Ua.ModelDesigner.TypeDesign"/></typeparam>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.TypeDesign`1.ClassName">
            <summary>
            Gets or sets the name of the class.This is the name for the instance of the type. If not specified the validator 
            creates it by removing the 'Type' suffix from the SymbolicName for the Node. 
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.TypeDesign`1.BaseType">
            <summary>
            Gets or sets the type of the base.The SymbolicId for the BaseType.
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.TypeDesign`1.IsAbstract">
            <summary>
            Gets or sets a value indicating whether this instance is abstract.
            </summary>
            <value>
            	<c>true</c> if this instance is abstract; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.TypeDesign`1.NoClassGeneration">
            <summary>
            Gets or sets a value indicating whether to supress class generation for the type..
            </summary>
            <value><c>true</c> if supress class generation; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.ReferenceTypeDesign">
            <summary>
            ReferenceType define typed references between Nodes.
            </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.ReferenceTypeDesign.InverseName">
            <summary>
            Gets or sets the name of the inverse.
            </summary>
            <value>The name of the inverse.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.ReferenceTypeDesign.Symmetric">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CAS.UA.Model.Designer.Nodes.ReferenceTypeDesign"/> is symmetric.
            </summary>
            <value><c>true</c> if symmetric; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.DataTypeDesign">
            <summary>
            DataTypes define structure of a Value for Variables in the information model.
            </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.DataTypeDesign.NoArraysAllowed">
            <summary>
            Gets or sets a value indicating whether no arrays are allowed.
            </summary>
            <value><c>true</c> if [no arrays allowed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.DataTypeDesign.NotInAddressSpace">
            <summary>
            Gets or sets a value indicating whether [not in address space].
            </summary>
            <value><c>true</c> if [not in address space]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.EncodingDesign">
            <summary>
            Defines an Object which is a Data Type Encoding for a DataType.
            </summary>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.ObjectDesign`1">
            <summary>
            Defines the structure of an Object in the information model.
            </summary>
            <typeparam name="T">Class from Opc UA Model Designer</typeparam>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.ObjectDesign`1.SupportsEvents">
            <summary>
            Gets or sets a value indicating whether it supports events.
            </summary>
            <value><c>true</c> if [supports events]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.VariableTypeDesign">
            <summary>
            VariableTypes define structure of a Variable in the information model.
            </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableTypeDesign.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableTypeDesign.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableTypeDesign.ValueRank">
            <summary>
            Gets or sets the value rank.
            </summary>
            <value>The value rank.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableTypeDesign.AccessLevel">
            <summary>
            Gets or sets the access level.
            </summary>
            <value>The access level.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableTypeDesign.ExposesItsChildren">
            <summary>
            Gets or sets a value indicating whether [exposes its children].
            </summary>
            <value><c>true</c> if [exposes its children]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.EventTypeDesign">
            <summary>
            EventTypes are ObjectTypes that define events produced by the system.
            </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.EventTypeDesign.SourceObjectType">
            <summary>
            Gets or sets the type of the source object.
            </summary>
            <value>The type of the source object.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.ObjectTypeDesign`1">
            <summary>
            ObjectTypes define structure of an Object in the information model.
            </summary>
            <typeparam name="T">Class from Opc UA Model Designer</typeparam>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.StateMachineTypeDesign">
            <summary>
            StateMachineType are ObjectTypes that define a state machine.
            </summary>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.ViewDesign">
            <summary>
            ViewDesign define structure of an View in the information model.
            </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.ViewDesign.SupportsEvents">
            <summary>
            Gets or sets a value indicating whether it supports events.
            </summary>
            <value><c>true</c> if [supports events]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.ViewDesign.ContainsNoLoops">
            <summary>
            Gets or sets a value indicating whether [contains no loops].
            </summary>
            <value><c>true</c> if [contains no loops]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.VariableDesign`1">
            <summary>
            Defines the structure of a Variable in the information model.
            </summary>
            <typeparam name="T">Class from Opc UA Model Designer</typeparam>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableDesign`1.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableDesign`1.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableDesign`1.ValueRank">
            <summary>
            Gets or sets the value rank.
            </summary>
            <value>The value rank.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableDesign`1.AccessLevel">
            <summary>
            Gets or sets the access level.
            </summary>
            <value>The access level.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableDesign`1.MinimumSamplingInterval">
            <summary>
            Gets or sets the minimum sampling interval.
            </summary>
            <value>The minimum sampling interval.</value>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.VariableDesign`1.Historizing">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CAS.UA.Model.Designer.Nodes.VariableDesign`1"/> is historizing.
            </summary>
            <value><c>true</c> if historizing; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.DictionaryDesign">
            <summary>
            Defines an Variable which is a DataTypeDictionary.
            </summary>
        </member>
        <member name="P:CAS.UA.Model.Designer.Nodes.DictionaryDesign.EncodingName">
            <summary>
            Gets or sets the name of the encoding.
            </summary>
            <value>The name of the encoding.</value>
        </member>
        <member name="T:CAS.UA.Model.Designer.Nodes.PropertyDesign">
            <summary>
            Defines a Variable which is a Property for a Node.
            </summary>
        </member>
    </members>
</doc>
