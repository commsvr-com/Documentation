<?xml version="1.0" encoding="utf-8"?>
<topic id="7f816c6d-3aa2-4f38-9992-16d892e6fe4a" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>

      <para></para>
      <autoOutline />
    </introduction>
    <section address="Boolean">
      <title>Boolean</title>
      <content>
        <para>
          A Boolean value shall be encoded as a single byte where a value of 0 (zero) is false and any non-zero value is true.
        </para>
        <para>
          Encoders shall use the value of 1 to indicate a true value; however, decoders shall treat any non-zero value as true.
        </para>
      </content>
    </section>
    <section address="Integer">
      <title>Integer</title>
      <content>
        <para>
          All integer types shall be encoded as little endian values where the least significant byte appears first in the stream.
        </para>
        <para>
          The Figure 1 illustrates how the value 1,000,000,000 (Hex: 3B9ACA00) should be encoded as a 32 bit integer in the stream.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 1">Encoding Integers in a Binary Stream</caption>
          <image placement="center" xlink:href="C7C01A18-A2CC-454b-BDD5-CC87F13E7A81" />
        </mediaLink>
      </content>
    </section>
    <section address="FloatingPoint">
      <title>Floating Point</title>
      <content>
        <para>
          All floating point values shall be encoded with the appropriate IEEE-754binary representation which has three basic components: the sign, the exponent, and the fraction. The bit ranges assigned to each component depend on the width of the type. Figure 2 lists the bit ranges for the supported floating point types.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 2">Encoding Integers in a Binary Stream</caption>
          <image placement="center" xlink:href="D8C89BC7-692B-457b-81FB-0A0C80225FD9" />
        </mediaLink>
        <para>
          In addition, the order of bytes in the stream is significant. All floating point values shall be encoded with the least significant byte appearing first (i.e. little endian).
        </para>
        <para>
          The Figure 3 illustrates how the value -6.5 (Hex: C0D00000) should be encoded as a Float.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 3">Encoding Integers in a Binary Stream</caption>
          <image placement="center" xlink:href="6AE206A2-9361-4ead-83F2-B97D5EDC8594" />
        </mediaLink>
      </content>
    </section>
    <section address="String">
      <title>String</title>
      <content>
        <para>
          All String values are encoded as a sequence of UTF8characters without a null terminator and preceded by the length in bytes..
        </para>
        <para>
          The length in bytes is encoded as Int32. A value of -1 is used to indicate a ‘null’ string.
        </para>
        <para>
          Figure 4 illustrates how the multilingual string “水Boy” should be encoded in a byte stream.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 4">Encoding Strings in a Binary Stream</caption>
          <image placement="center" xlink:href="E23B55DE-91DF-4e8a-B445-BB3AF487489D" />
        </mediaLink>
      </content>
    </section>
    <section address="DateTime">
      <title>DateTime</title>
      <content>
        <para>
          A DateTime value shall be encoded as a 64-bit signed integer (see <link xlink:href="#Integer">Integer</link> ) which represents the number of 100 nanosecond intervals since January 1, 1601 (UTC)..
        </para>
        <para>
          Not all platforms will be able to represent the full range of dates and times that can be represented with this encoding. For example, the UNIX time_t structure only has a 1 second resolution and cannot represent dates prior to 1970. For this reason, a number of rules shall be applied when dealing with date/time values that exceed the dynamic range of a platform. These rules are:
        </para>
        <list class="ordered">
          <listItem>
            <para>
              A date/time value is encoded as 0 if either:
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  The value equal to or earlier than 1601-01-01 12:00AM
                </para>
              </listItem>
              <listItem>
                <para>
                  The value is the earliest date that can be represented with the platform’s encoding.
                </para>
              </listItem>
            </list>
          </listItem>
          <listItem>
            <para>
              A date/time is encoded as the maximum value for an Int64 if either:
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  The value is equal to or greater than 9999-01-01 11:59:59PM
                </para>
              </listItem>
              <listItem>
                <para>
                  The value is the latest date that can be represented with the platform’s encoding
                </para>
              </listItem>
            </list>
          </listItem>
          <listItem>
            <para>
              A date/time is decoded as the earliest time that can be represented on the platform if either:
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  The encoded value is 0
                </para>
              </listItem>
              <listItem>
                <para>
                  The encoded value represents a time earlier than the earliest time that can be represented with the platform’s encoding.
                </para>
              </listItem>
            </list>
          </listItem>
          <listItem>
            <para>
              A date/time is decoded as the latest time that can be represented on the platform if either:
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  The encoded value is the maximum value for an Int64
                </para>
              </listItem>
              <listItem>
                <para>
                  The encoded value represents a time later than the latest time that can be represented with the platform’s encoding.
                </para>
              </listItem>
            </list>
          </listItem>
        </list>
        <para>
          These rules imply that the earliest and latest times that can be represented on a given platform are invalid date/time values and should be treated that way by applications.
        </para>
        <para>
          A decoder shall truncate the value if a decoder encounters a DateTime value with a resolution that is greater than the resolution supported on the platform.
        </para>
      </content>
    </section>
    <section address="Guid">
      <title>Guid</title>
      <content>
        <para>
          A Guid is encoded a the structure shown in <link xlink:href="ed06838a-603f-4c9e-92e1-bf215ecf46e6">section Overview topic GUID</link> . The fields are encode sequentially according to the data type for field.
        </para>
        <para>
          Figure 5 illustrates how the Guid “72962B91-FA75-4ae6-8D28-B404DC7DAF63” should be encoded in a byte stream.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 5">Encoding Guids in a Binary Stream</caption>
          <image placement="center" xlink:href="2139D8D3-13BC-4a65-A812-CEC601B68C41" />
        </mediaLink>
      </content>
    </section>
    <section address="ByteString">
      <title>ByteString</title>
      <content>
        <para>
          A ByteString is encoded as sequence of bytes preceded by its length in bytes. The length is encoded as a 32-bit signed integer as described above.
        </para>
        <para>
          If the length of the byte string is -1 then the byte string is ‘null’.
        </para>
      </content>
    </section>
    <section address="XmlElement">
      <title>XmlElement</title>
      <content>
        <para>
          An XmlElement is an XML fragment serialized as UTF-8 string and then encoded as ByteString
        </para>
        <para>
          Figure 6 illustrates how the XmlElement  “<A>Hot水</A>” should be encoded in a byte stream.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 6">Encoding XmlElements in a Binary Stream</caption>
          <image placement="center" xlink:href="5D6938AD-9D68-45a8-AC2A-1F4E94FFB6E7" />
        </mediaLink>
      </content>
    </section>
    <section address="NodeId">
      <title>NodeId</title>
      <content>
        <para>
          The components of a NodeId are described the Figure 7.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 7">NodeId Components</caption>
          <image placement="center" xlink:href="BC5B5E73-8A86-4484-87B9-2FA5181263B6" />
        </mediaLink>
        <para>
          The encoding of a NodeId varies according to the contents of the instance. For that reason the first byte of the encoded form indicates the format of the rest of the encoded NodeId. The possible encoding formats are shown on Figure 8. The tables that follow describe the structure of the each possible format (they exclude the byte which indicates the format).
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 8">NodeId Encoding Values</caption>
          <image placement="center" xlink:href="935918F2-FB5F-49e1-96BD-95F9D858601E" />
        </mediaLink>
        <para>
          The standard NodeId encoding has the structure shown on Figure 9. The standard encoding is used for all formats that do not have an explicit format defined.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 9">Standard NodeId Binary Encoding</caption>
          <image placement="center" xlink:href="D741494C-6D58-488c-967F-6D6209859AEA" />
        </mediaLink>
        <para>
          An example of a String NodeId with Namespace = 1 and Identifier = “Hot水” is shown in Figure 10.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 10">A String NodeId</caption>
          <image placement="center" xlink:href="4AB3163D-45B4-4e87-9CE3-C16977A027B2" />
        </mediaLink>
        <para>
          The Two Byte NodeId encoding has the structure shown on Figure 11.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 11">Two Byte NodeId Binary Encoding</caption>
          <image placement="center" xlink:href="2529AB16-7821-4212-92B9-52A1F56419DD" />
        </mediaLink>
        <para>
          An example of a Two Byte NodeId with Identifier = 72 is shown in Figure 12.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 12">A Two Byte NodeId</caption>
          <image placement="center" xlink:href="5693ABAE-BE7E-41be-8269-D2723C40DE8A" />
        </mediaLink>
        <para>
          The Four Byte NodeId encoding has the structure shown in Figure 13.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 13">Four Byte NodeId Binary Encoding</caption>
          <image placement="center" xlink:href="618DE0E7-CC48-4cef-A4D5-80F3BEE42271" />
        </mediaLink>
        <para>
          An example of a Four Byte NodeId with Namespace = 5 and Identifier = 1025 is shown in Figure 14.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 14">A Four Byte NodeId</caption>
          <image placement="center" xlink:href="87FA3B2B-C9E9-410e-B139-33D5AE852573" />
        </mediaLink>
      </content>
    </section>
    <section address="ExpandedNodeId">
      <title>ExpandedNodeId</title>
      <content>
        <para>
          An ExpandedNodeId extends the NodeId structure by allowing the NamespaceUri to be explicitly specified instead of using the NamespaceIndex. The NamespaceUri is optional. If it is specified then the NamespaceIndex inside the NodeId shall be ignored.
        </para>
        <para>
          The ExpandedNodeId is encoded by first encoding a NodeId as described in <link xlink:href="#NodeId">NodeId</link> and then encoding NamespaceUri as a String.
        </para>
        <para>
          An instance of an ExpandedNodeId may still use the NamespaceIndex instead of the NamespaceUri. In this case, the NamespaceUri is not encoded in the stream. The presence of the NamespaceUri in the stream is indicated by setting the NamespaceUri flag in the encoding format byte for the NodeId.
        </para>
        <para>
          If the NamespaceUri is present then the encoder shall encode the NamespaceIndex as 0 in the stream when the NodeId portion is encoded. The unused NamespaceIndex is included in the stream for consistency,
        </para>
        <para>
          An ExpandedNodeId may also have a ServerIndex which is encoded as a <link xlink:href="e6dbd978-9b2f-475e-bcb3-304975700033">UInt32</link> after the NamespaceUri. The ServerIndex flag in the NodeId encoding byte indicates whether the ServerIndex is present in the stream. The ServerIndex is omitted if it is equal to zero.
        </para>
        <para>
          The ExpandedNodeId encoding has the structure shown in Figure 15.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 15">ExpandedNodeId Binary Encoding</caption>
          <image placement="center" xlink:href="BA3A9523-F137-439b-BC54-70BA58A2B223" />
        </mediaLink>
      </content>
    </section>
    <section address="StatusCode">
      <title>StatusCode</title>
      <content>
        <para>
          A StatusCode is encoded as a <link xlink:href="e6dbd978-9b2f-475e-bcb3-304975700033">UInt32</link>
        </para>
      </content>
    </section>
    <section address="DiagnosticInfo">
      <title>DiagnosticInfo</title>
      <content>
        <para>
          A DiagnosticInfo structure is described in <link xlink:href="ef0092b5-9f31-4e8d-9901-270be06e6577"/>. It specifies a number of fields that could be missing. For that reason, the encoding uses a bit mask to indicate which fields are actually present in the encoded form.
        </para>
        <para>
          As described in <link xlink:href="ef0092b5-9f31-4e8d-9901-270be06e6577"/>, the SymbolicId, NamespaceUri, LocalizedText and Locale fields are indexes in a string table which is returned in the response header. Only the index of the string in this table is encoded. An index of -1 indicates that there is no value for the string.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 16">DiagnosticInfo Binary Encoding</caption>
          <image placement="center" xlink:href="57204E0D-6FD7-411a-AF0F-7AFA09317A2E" />
        </mediaLink>
      </content>
    </section>
    <section address="QualifiedName">
      <title>QualifiedName</title>
      <content>
        <para>
          A QualifiedName structure is encoded as shown in Figure 17.
        </para>
        <para>
          The abstract QualifiedName structure is defined in <link xlink:href="546f49d5-8153-434c-9e74-d7835d7862bc#LocaleId"/> .
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 17">QualifiedName Binary Encoding</caption>
          <image placement="center" xlink:href="87CF0259-4139-461d-90C3-0BA514B5D8C3" />
        </mediaLink>
      </content>
    </section>
    <section address="LocalizedText">
      <title>LocalizedText</title>
      <content>
        <para>
          A LocalizedText structure contains two fields that could be missing. For that reason, the encoding uses a bit mask to indicate which fields are actually present in the encoded form.
        </para>
        <para>
          The abstract LocalizedText structure is defined in <link xlink:href="546f49d5-8153-434c-9e74-d7835d7862bc#LocalizedText"/>.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 18">LocalizedText Binary Encoding</caption>
          <image placement="center" xlink:href="FAE3B142-BC6B-4b7c-A0E9-F58A785E5F7B" />
        </mediaLink>
      </content>
    </section>
    <section address="ExtensionObject">
      <title>ExtensionObject</title>
      <content>
        <para>
          An ExtensionObject is encoded as sequence of bytes prefixed by the NodeId of its DataTypeEncoding and the number of bytes encoded.
        </para>
        <para>
          An ExtensionObject may be encoded by the application which means it is passed as a ByteString or an XmlElement  to the encoder. In this case, the encoder will be able to write the number of bytes in the object before it encodes the bytes. However, an ExtensionObject may know how to encode/decode itself which means the encoder shall calculate the number of bytes before it encodes the object or it shall be able seek backwards in the stream and update the length after encoding the body
        </para>
        <para>
          When a decoder encounters an ExtensionObject it shall check if it recognizes the DataTypeEncoding identifier. If it does then it can call the appropriate function to decode the object body. If the decoder does not recognize the type it shall use the EncodingMask to determine if the body is a ByteString or an XmlElement and then decode the object body.
        </para>
        <para>
          The serialized form of a ExtensionObject is shown in Figure 19.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 19">Extension Object Binary Encoding</caption>
          <image placement="center" xlink:href="74DB4F5B-71DB-4fc2-BC08-42CCBD07EB68" />
        </mediaLink>
        <para>
          ExtensionObjects are used in two contexts: as values contained in Variant structures or as parameters in OPC UA messages.
        </para>
      </content>
    </section>
    <section address="Variant">
      <title>Variant</title>
      <content>
        <para>
          An Variant is a union of the built-in types.
        </para>
        <para>
          The structure of an Variant is shown in Figure 20
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 20">Variant Binary Encoding</caption>
          <image placement="center" xlink:href="00FEF49C-9A99-4324-9B20-C35FCA52A378" />
        </mediaLink>
        <para>
          The possible types and their identifiers that can be encoded in an Variant are shown in <link xlink:href="e6dbd978-9b2f-475e-bcb3-304975700033"/>
        </para>
      </content>
    </section>
    <section address="DataValue">
      <title>DataValue</title>
      <content>
        <para>
          A DataValue is always preceded by a mask that indicates which fields are present in the stream.
        </para>
        <para>
          The fields of a DataValue are described in Figure 21.
        </para>
        <mediaLink>
          <caption placement="after" lead="Figure 21">Data Value Binary Encoding</caption>
          <image placement="center" xlink:href="B43BE252-5F0E-424a-810E-B12664D6D82E" />
        </mediaLink>
        <para>
          The Picoseconds fields store the difference between a high resolution timestamp with a resolution of 10ps and the Timestamp field value which only has a 100ns resolution. The Picoseconds fields shall contain values less than 10000. The decoder shall treat values greater than or equal to 10000 as the value ‘9999’.
        </para>
      </content>
    </section>
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>