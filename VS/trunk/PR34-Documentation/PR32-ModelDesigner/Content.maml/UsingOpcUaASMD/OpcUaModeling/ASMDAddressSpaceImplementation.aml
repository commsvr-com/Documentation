<?xml version="1.0" encoding="utf-8"?>
<topic id="bce14a86-6885-4e62-abb4-0381a3b48df7" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
    </introduction>
    <section address="Implementation">
      <title>Implementation</title>
      <content>
        <para>Anyway, in the generic and hard-coded implementations, model designing is a common starting point that results in providing the Process Model in an appropriate format. Model designing is a process aimed at defining a set of Nodes and their associations and, next, creating this Process Model representation in a format appropriate for the implementation of the Nodes Management function class. </para>
          <para>If the model is to have a broader scope than a single application, an intermediate step is necessary. At this step, the model should be represented in a widely accepted format, independent of the programming language (implementation). To provide hard-coded Process Model representation, an additional code generation step is necessary in this scenario. </para>
          <mediaLink>
              <caption placement="after" lead="Figure 1">Designing process</caption>
              <image placement="center" xlink:href = "e73f1364-a7c5-4ff8-9143-ecd4215b3121"/>
          </mediaLink>
          <para>Figure 1 shows a diagram where three functional classes are responsible for the whole address space creation and management process as a sequence of the following steps:</para>
          <list class="ordered">
              <listItem>
                  <para>Model designing </para>
              </listItem>
              <listItem>
                  <para>Code generation</para>
              </listItem>
              <listItem>
                  <para>Nodes management</para>
              </listItem>
          </list>
          <para>In this process, the Model Designer depends on the informal model idea of the Real-time Process. The outcome of this step is a Formal Model representation created according to the language (Model Language). Code Generation depends on the model representation (Formal Model) and generates the code (Process Model) according to the selected language and object management implementation (Implementation Language). Finally, Nodes Management depends on the model representation (Process Model) in the selected language and is responsible for utilization of functionality and declarations provided by the model to expose the process-dependent address space. The Process Link is also associated with the Real-time Process to provide access to plant floor data.  </para>
          <para>With the exception of modeling, this multi-step process can be automated and completely hidden from the process architects and designers except modification of the Process Model that must provide process data bindings.</para>
          <para>The designing step depends on the process idea and this inevitably involves our imagination. To support our imagination and make the process more intuitive, the subject under design should be visualized. In the above implementation scenario, the main challenge that has to be faced up by developers is how to establish bindings of real-time data and process metadata without programming. It requires configuration in context of the model. To make the process more productive, management of the model should offer a set of helpful functions in this respect. </para>
      </content>
    </section>
    <relatedTopics>
        <link xlink:href="1f31ce47-e3ac-45db-a7a6-1aa869816c48" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>