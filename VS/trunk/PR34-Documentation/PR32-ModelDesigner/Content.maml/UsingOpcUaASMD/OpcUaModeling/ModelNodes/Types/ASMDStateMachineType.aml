<?xml version="1.0" encoding="utf-8"?>
<topic id="06bceb63-a3ba-46c9-bb3b-5d3daa594fad" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
    </introduction>
    <section address="StateMachineType">
      <title>StateMachineType</title>
      <content>
        <para>For the state machines definition we assume that state machines are types and instances of a type have their states and semantics specified by the type. For some types this means that the states and transitions are fixed. For other types the states and transitions may be dynamic or unknown. A state machine where all the states are specified explicitly by the type is called a finite state machine.</para>
          <para>Therefore we distinguish between StateMachineType and StateMachine. The StateMachineType specifies a description of the state machine – its states, transitions, etc. – whereas the StateMachine is an instance of the StateMachineType and contains the current state only.</para>
          <para>Each StateMachine contains information about the current state. If the StateMachineType has SubStateMachines, the StateMachine also contains information about the current state of the SubStateMachines. StateMachines which have their states completely defined by the type are instances of a FiniteStateMachineType.</para>
      </content>
    </section>
      <section address="StateMachines">
          <title>State machines</title>
          <content>
              <para>The information model provides constructs that can be used to model discrete object behavior in terms of the states an object can reside in and the transitions that can happen between those states.  State machines are built as complex objects using dedicated <legacyItalic>ObjectTypes, VariableTypes</legacyItalic> and <legacyItalic>ReferenceTypes</legacyItalic>, whose behavior is governed by the rules that must be strictly observed. </para>
              <para>A state is a condition in which an object can be at some point during its lifetime, for some finite amount of time. A transition is a change of an object from one state (the source state) to another (the target state).  The transition is triggered ("fires") when an event of interest – cause - to a given object occurs. According to the information model concept, causes are represented in the form of Methods that have to be called, but a vendor can define other items or have them be internal (i.e. nothing is listed causing the transition). There may also be an action associated with a triggered transition. This action called an “effect” is executed unconditionally before the object enters the target state. Effects are Events that are generated.</para>
              <para>The simplified state machine model described above can be freely expanded to provide more complex functionality like sub-machines, parallel states, forks and joins, history states, choices and junctions, etc. </para>
              <mediaLink>
                  <caption placement="after" lead="Figure 1">Example of a simple state machine</caption>
                  <image placement="center" xlink:href = "fd9c1384-58bb-4097-a8ac-78f2db516785"/>
              </mediaLink>
              <para>State machines are represented in the Address Space as an object of a type derived from the <legacyItalic>StateMachineType</legacyItalic> that defines a single Variable of the <legacyItalic>StateVariableType</legacyItalic>, which represents the current state of the machine. An instance of the <legacyItalic>StateMachineType</legacyItalic> shall generate an event whenever a state change occurs. Transitions are represented as objects of the <legacyItalic>TransitionType</legacyItalic>. Each valid transition shall have exactly one <legacyItalic>FromState</legacyItalic> reference and exactly one <legacyItalic>ToState</legacyItalic> reference, each pointing to an object of the <legacyItalic>StateType</legacyItalic>.</para>
              <para>Using the above terminology we can represent any state machine from Figure 1 as a diagram shown in Figure 2 . For this dia-gram it is assumed that <legacyItalic>MyStateMachineType</legacyItalic> is derived directly or indirectly from the <legacyItalic>StateMachineType</legacyItalic>. All states, transitions and methods are components of this type. </para>
              <mediaLink>
                  <caption placement="after" lead="Figure 2">Representation of an example state machine</caption>
                  <image placement="center" xlink:href = "a86d9d58-4b82-43cd-a099-47cd1078511b"/>
              </mediaLink>
          </content>
      </section>
    <relatedTopics>
        <link xlink:href="deeeaaba-395a-4d8c-bdcc-6fd08460d8b3" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>