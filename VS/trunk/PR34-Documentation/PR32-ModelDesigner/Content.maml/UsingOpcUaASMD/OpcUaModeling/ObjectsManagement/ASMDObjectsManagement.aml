<?xml version="1.0" encoding="utf-8"?>
<topic id="1f31ce47-e3ac-45db-a7a6-1aa869816c48" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
    </introduction>
    <section address="ObjectsManagement">
      <title>Objects management</title>
      <content>
        <para>To make systems interoperable, the data transfer mechanism must be associated with a consistent information repre-sentation model. OPC UA uses an object as a fundamental notion to represent data and activity of an underlying system. The objects are placeholders of variables, events and methods and are interconnected by references (Figure 1). This concept is similar to well-known object oriented programming (OOP) that is a programming paradigm using "objects" – data structures consisting of fields, events and methods – and their interactions to design computer programs. The OPC UA Information Model provides features such as data abstraction, encapsulation, polymorphism, and inheritance. </para>
          <mediaLink>
              <caption placement="after" lead="Figure 1">Object types and object instances</caption>
              <image placement="center" xlink:href = "6e29de74-87f5-4101-83a5-ac67ed7fbea9"/>
          </mediaLink>
          <para>The OPC UA object model allows servers to provide type definitions for objects and their components. Type definitions may be abstract, and may be inherited by new types to reflect polymorphism. They may also be common or they may be sys-tem-specific. Object types may be defined by standardization organizations, vendors or end-users. Each type must have a globally unique identifier that can be used to provide description of the information meaning from a defining body or organi-zation. Using of the type definitions to describe information exposed by the server allows:</para>
          <list class="bullet">
              <listItem>
                  <para>Development against type definition</para>
              </listItem>
              <listItem>
                  <para>Unambiguous assignment of the semantics to the data expected by the client </para>
              </listItem>
          </list>
          <para>Having defined types in advance, clients may provide dedicated functionality, for example: displaying information in the context of specific graphics.</para>
      </content>
    </section>
    <relatedTopics>
        <link xlink:href="bce14a86-6885-4e62-abb4-0381a3b48df7" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>