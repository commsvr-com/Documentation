<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>References</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="d0df531f-eed5-4e70-ae9c-971fc1116ffe" /><meta name="Description" content="OPC UA enables multiple mesh relationships between Nodes instead of being limited to just a single hierarchy. References are used to relate Nodes to each other. They can be accessed using browsing and querying defined by the services." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">OPC UA Address Space Model Designer<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/a2d55988-b59a-4a87-95b9-933f6bbdf5bd.htm" title="OPC UA Address Space Model Designer" tocid="roottoc">OPC UA Address Space Model Designer</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/a2d55988-b59a-4a87-95b9-933f6bbdf5bd.htm" title="OPC UA Address Space Model Designer" tocid="a2d55988-b59a-4a87-95b9-933f6bbdf5bd">OPC UA Address Space Model Designer</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/f6584b01-23f1-4108-bea5-5cce926bd7ed.htm" title="Using OPC UA Address Space Model Designer" tocid="f6584b01-23f1-4108-bea5-5cce926bd7ed">Using OPC UA Address Space Model Designer</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/181da14b-8c08-487e-9c52-f35ea36cbf4a.htm" title="OPC UA Modeling" tocid="181da14b-8c08-487e-9c52-f35ea36cbf4a">OPC UA Modeling</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/8c3d069f-ae57-4e81-aae9-3fb9bfbe441e.htm" title="Address Space Modeling" tocid="8c3d069f-ae57-4e81-aae9-3fb9bfbe441e">Address Space Modeling</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/928a3094-69de-4996-9aa6-6cb0b0e28845.htm" title="Attributes" tocid="928a3094-69de-4996-9aa6-6cb0b0e28845">Attributes</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/d0df531f-eed5-4e70-ae9c-971fc1116ffe.htm" title="References" tocid="d0df531f-eed5-4e70-ae9c-971fc1116ffe">References</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/12cbf21e-4432-4db0-9514-3e720350af96.htm" title="Process Data and Metadata" tocid="12cbf21e-4432-4db0-9514-3e720350af96">Process Data and Metadata</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/38fca5ab-d8eb-42c7-a950-42526b45950e.htm" title="Model verification in ASMD" tocid="38fca5ab-d8eb-42c7-a950-42526b45950e">Model verification in ASMD</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>References</h1></td></tr></table><span class="introStyle"><A href="http://www.commsvr.com/tabid/55/language/en-US/Default.aspx" title="CommServer online help" target="_blank">Home</A></span> <div class="collapsibleAreaRegion" id="References"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />References</span></div><div id="ID0RBSection" class="collapsibleSection"><p>OPC UA enables multiple mesh relationships between Nodes instead of being limited to just a single hierarchy. References are used to relate Nodes to each other. They can be accessed using browsing and querying defined by the services. Like Attributes, they are defined as fundamental components of Nodes. </p></div><div class="collapsibleAreaRegion" id="ReferenceTypes"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />ReferenceTypes</span></div><div id="ID1RBSection" class="collapsibleSection"><p>Reference types are used to create interconnections between Nodes. They are not instantiated, i.e. a NodeClass representing a Reference is not defined. Instead of instantiating the references, they are added to a collection associated with each NodeClass. NodeClass of the Node and its type decide what references are allowed to be added to this collection. </p><p>The base of all references is an abstract <em>References type</em> (Figure 1). There is no semantics associated with it.</p><div class="mediaCenter"><img alt="Standard Reference Type Hierarchy" src="../media/StandardReferenceTypeHierarchy.jpg" /><div class="caption"><span class="captionLead">Figure 1:
						</span>Standard ReferenceType hierarchy</div></div><p>There are two disjoint sets of standard references:</p><ul><li><p>HierarchicalReferences </p></li><li><p>NonHierarchicalReferences</p></li></ul><p>This distinction reflects two fundamental relationship categories that can be generally distinguished: the association and the dependency. Associations are used to build information architecture – Nodes hierarchy - that can be discovered by the clients using the browsing mechanism. An example of the association is the parent/child relationship. In this case we can say that the target belongs to the source. A dependency from a source element (called the client) to a target element (called the supplier) indicates that the source element uses or depends on the target element. An example of dependency is the Variable/VariableType relationship. In this case we can state that the target describes the source.</p><p><em>HierarchicalReferences</em> do not forbid loops. For example, starting from Node “A” and following <em>HierarchicalReferences</em> may lead to browse to Node “A” again.</p><p><em>HasChild</em> is an abstract type derived from HierarchicalReferences that creates a branch of types, which forbids loops. In this case, starting from Node “A” and only following References, which are subtypes of <em>HasChild</em>, we shall never be able to return to “A”. But it is allowed that there may be more than one path leading to another Node “B”.</p><p>The <em>HasChild</em> branch contains <em>HasComponent</em> and <em>HasProperty</em>. Both are derived from the <em>Aggregates</em> type and used to reflect belongs to the relationship. There is also <em>HasSubtype</em> on this branch, but in this case it is used to expose the inheritance hierarchy.</p><p>The <em>HasComponent</em> derived from the <em>Aggregates</em> (Figure 1) is defined to build the part-of relationship, i.e. the target Node of <em>HasComponent</em> is a part of the source Node. This type is used to relate Objects, ObjectTypes, Variables and Methods. Table 2 contains the allowed composite Nodes (source) and allowed components as a target of this type of reference. By using this reference, the <em>Variable</em> is defined as a <em>DataVariable</em>.</p><div class="mediaCenter"><img alt="Has Component Usage Scope" src="../media/HasComponentUsageScope.jpg" /><div class="caption"><span class="captionLead">Figure 2:
						</span>HasComponent usage scope</div></div><p>The semantics of <em>HasProperty</em> derived from <em>Aggregates</em> (Figure 1) is to identify the properties of a Node. The source Node of this type can be of any <em>NodeClass</em> The target Node shall be a <em>Variable</em> By using the <em>HasProperty</em>, the <em>Variable</em> is de-fined as <em>Property</em>. Since <em>Properties</em> shall not have <em>Properties</em>, a <em>Property</em> shall never be the source Node of a HasProperty reference.</p><p>An example of a complex object using the references described above is shown in Figure 3. The <em>ServerType</em> has <em>HasProperty</em> references (double hashed lines) pointing to the <em>ServerArray, NamespaceArray, ServiceLevel</em> and <em>Auditing</em> properties. The <em>ServerStatus</em> is a child variable pointed by a reference of the <em>HasComponent</em> (single hashed line) type. Objects of this type have also components: <em>ServerCapabilities, ServerDiagnostics, VendorServerInfo, ServerRedundancy</em> objects pointed also by a reference of the <em>HasComponent</em> type.</p><div class="mediaCenter"><img alt="Server Type Definition" src="../media/ServerTypeDefinition.jpg" /><div class="caption"><span class="captionLead">Figure 3:
						</span>ServerType definition</div></div><p>The <em>HasSubtype</em> is a subtype of the <em>HasChild</em> type. It is worth noting, that inheritance using <em>HasSubtype</em> is represented using the one-to-many (parent/child) relationship. Because new types can be freely derived from the existing ones we cannot enumerate all children in advance - the tree must be built and maintained dynamically during the lifecycle of the Address Space. This means that when a new type is created it is created with a reference to its base (parent), which results in a new subtype being added to the parent.</p><p>The <em>Organizes</em> is the next subtype of <em>HierarchicalReferences</em>. The semantics of it is to organize Nodes in the Address Space. It can be used to span multiple hierarchies independent of any hierarchy created with the non-looping <em>Aggregates</em> references. The source Node of references of this type shall be an <em>Object</em> or a <em>View</em>. If it is an <em>Object</em> it should be an <em>Object</em> of the <em>FolderType</em> or one of its subtypes. The target Node of this type can be of any <em>NodeClass</em>.</p><p>The types:  <em>HasModellingRule, HasModelParent, HasTypeDefinition, HasEncoding, HasDescription, GeneratesEvent</em> belong to the <em>NonHierarchicalReferences</em> branch.</p></div></div></div><div id="pageFooter" class="pageFooter">This documentation is designed to be used with CAS CommServer (this software is available at <A href="http://www.commsvr.com/DownloadCenter/ProductSoftware/PR2105CommServer_Software.aspx" title="CommServer -multiprotocol, multichannel, redundant communication server – software installation.">http://www.commsvr.com</A>).<p><a href="http://www.commsvr.com/" target="_blank">Copyright © 2008-2020, CAS, All rights reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:techsupp%40cas.eu?Subject=OPC%20UA%20Address%20Space%20Model%20Designer">CAS</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>