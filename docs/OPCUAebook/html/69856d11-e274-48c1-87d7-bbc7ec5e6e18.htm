<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Type Definition</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="69856d11-e274-48c1-87d7-bbc7ec5e6e18" /><meta name="Description" content="OPC Unified Architecture servers shall provide type definitions for and nodes. The HasTypeDefinition reference shall be used to link an instance with its type definition represented by a type definition node." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">OPC Unified Architecture<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/e34055b2-23e0-4f1a-9e00-52d75becaeec.htm" title="OPC Unified Architecture" tocid="roottoc">OPC Unified Architecture</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/e34055b2-23e0-4f1a-9e00-52d75becaeec.htm" title="Welcome to the OPC Unified Architecture e-book" tocid="e34055b2-23e0-4f1a-9e00-52d75becaeec">Welcome to the OPC Unified Architecture e-book</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/58e663ae-9e77-4a9b-9adc-cbc18c4d7e9e.htm" title="Address Space" tocid="58e663ae-9e77-4a9b-9adc-cbc18c4d7e9e">Address Space</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad8b0a3f-9293-4a1e-8f03-3e463a8d5f04.htm" title="Concepts" tocid="ad8b0a3f-9293-4a1e-8f03-3e463a8d5f04">Concepts</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/44be48a5-7e42-42a2-906b-86b569ed9d93.htm" title="Node Model" tocid="44be48a5-7e42-42a2-906b-86b569ed9d93">Node Model</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/57948ea6-b48e-43c9-addc-d24694886784.htm" title="Variable" tocid="57948ea6-b48e-43c9-addc-d24694886784">Variable</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/69856d11-e274-48c1-87d7-bbc7ec5e6e18.htm" title="Type Definition" tocid="69856d11-e274-48c1-87d7-bbc7ec5e6e18">Type Definition</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/61bf86cb-8e76-408c-952f-ab6960eb96b8.htm" title="Event" tocid="61bf86cb-8e76-408c-952f-ab6960eb96b8">Event</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/c9cd61c1-3e7c-4fef-a834-472417145053.htm" title="Method" tocid="c9cd61c1-3e7c-4fef-a834-472417145053">Method</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Type Definition</h1></td></tr></table><span class="introStyle"><A href="http://www.commsvr.com" title="OPC Unified Architecture" target="_blank">Home</A></span> <div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#ComplexTypeDefinitionNodesInstanceDeclarations">Complex Type Definition Nodes and their Instance Declarations</a></li><li class="outlineSectionEntry"><a href="#Subtyping">Subtyping</a></li><li class="outlineSectionEntry"><a href="#InstantiationOfComplexTypeDefinitionNodes">Instantiation of Complex Type Definition Nodes</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection">See Also</a></li></ul><p>OPC Unified Architecture servers shall provide type definitions for <a href="d38394a1-c1c0-4c91-8a38-4fa47ad2bf35.htm">Object</a> and <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a> nodes. The <a href="57be83ea-0aac-4456-b29a-0b18a8467134.htm#HasTypeDefinition">HasTypeDefinition</a> reference shall be used to link an instance with its type definition represented by a type definition node. Type definitions are required, however, section <a href="3f999f23-4ad7-46a4-80dd-ab33729d5f49.htm">Information Model</a> describes a <a href="d43f206c-8b58-4ded-b9c8-74eaac63cb36.htm">, a PropertyType and a BaseDataVariableType</a> so a server can use such a base type if no more specialised type information is available. Objects and variables nodes inherit the attributes specified by their type definition node.
    </p><p>
      In some cases, the <a href="546f49d5-8153-434c-9e74-d7835d7862bc.htm#NodeId">NodeId</a> used by the <a href="57be83ea-0aac-4456-b29a-0b18a8467134.htm#HasTypeDefinition">HasTypeDefinition</a> reference will be well-known to clients and servers. Organizations may define type definition nodes that are well-known in the industry. Well-known <a href="546f49d5-8153-434c-9e74-d7835d7862bc.htm#NodeId">NodeId</a> values of type definition nodes provide for commonality across OPC Unified Architecture servers and allow clients to interpret the type definition node without having to read it from the server. Therefore, servers may use well-known values of the <a href="546f49d5-8153-434c-9e74-d7835d7862bc.htm#NodeId">NodeId</a> attribute without representing the corresponding type definition nodes in their Address Space. However, the type definition nodes shall be provided for generic clients. These type definition nodes may exist in another server.
    </p><p>
      The following example, illustrated in Figure 1, describes the use of the <a href="57be83ea-0aac-4456-b29a-0b18a8467134.htm#HasTypeDefinition">HasTypeDefinition</a> reference. In this example, a setpoint parameter <span class="code">SP</span> is represented as a <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm#DataVariable">DataVariable</a> in the Address Space. This <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm#DataVariable">DataVariable</a> is part of an object not shown in the figure.
    </p><p>
      To provide for a common setpoint definition that can be used by other objects, a specialised <a href="1bc63c28-33da-4c76-b8f6-8df43f0a776f.htm">VariableType</a> is used. Each setpoint <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm#DataVariable">DataVariable</a> that uses this common definition will have a <a href="57be83ea-0aac-4456-b29a-0b18a8467134.htm#HasTypeDefinition">HasTypeDefinition</a> reference that identifies the common <span class="code">SetPoint</span> variable type.
    </p><div class="mediaCenter"><img alt="Example of a Variable Defined By a VariableType" src="../media/ExampleVariableDefinedByVariableType.JPG" /><div class="caption"><span class="captionLead">Figure 1:
						</span>Example of a variable defined by a VariableType</div></div></div><div class="collapsibleAreaRegion" id="ComplexTypeDefinitionNodesInstanceDeclarations"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Complex Type Definition Nodes and their Instance Declarations</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
        Type definition nodes can be complex. A complex type definition node also defines references to other nodes as part of the type definition. The modelling rules specify how those nodes are handled when creating an instance of the type definition.
      </p><p>
        A type definition node references instances instead of other type definition nodes to allow unique names for several instances of the same type, to define default values and to add references for those instances that are specific to this complex type definition node and not to the type definition node of the instance. For example, in Figure 2 the <a href="9d541e15-812b-4dce-9b4c-7b0d66e74daf.htm">ObjectType</a> node <span class="code">AI_BLK_TYPE</span>, representing a function block, has a <a href="57be83ea-0aac-4456-b29a-0b18a8467134.htm#HasComponent">HasComponent</a> reference to a <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a><span class="code">SP</span> of the <a href="1bc63c28-33da-4c76-b8f6-8df43f0a776f.htm">VariableType</a><span class="code">SetPoint</span>. <span class="code">AI_BLK_TYPE</span> could have an additional setpoint <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a> of the same type using a different name. It could add a Property to the <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a> that was not defined by its type definition node <span class="code">SetPoint</span>. And it could define a default value for <span class="code">SP</span>, that is, each instance of <span class="code">AI_BLK_TYPE</span> would have a <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a><span class="code">SP</span> initially set to this value.
      </p><div class="mediaCenter"><img alt="Example of a Complex TypeDefinition" src="../media/ExampleComplexTypeDefinition.JPG" /><div class="caption"><span class="captionLead">Figure 2:
						</span>Example of a Complex TypeDefinition</div></div><p>
        This approach is commonly used in object-oriented programming languages in which the variables of a class are defined as instances of other classes. When the class is instantiated, each variable is also instantiated, but with the default values (constructor values) defined for the containing class. That is, typically, the constructor for the component class runs first, followed by the constructor for the containing class. The constructor for the containing class may override component values set by the component class.
      </p><p>
        To distinguish instances used for the type definitions from instances that represent real data, those instances are called instance declarations. However, this term is used to simplify this specification, if an instance is an instance declaration or not is only visible in the Address Space by following its references. Some instances may be shared and therefore referenced by type definition nodes, instance declarations and instances. This is similar to class variables in object-oriented programming languages.
      </p></div><div class="collapsibleAreaRegion" id="Subtyping"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Subtyping</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
        This specification allows subtyping of type definitions. Subtyping of <a href="9d541e15-812b-4dce-9b4c-7b0d66e74daf.htm">object types</a> and <a href="1bc63c28-33da-4c76-b8f6-8df43f0a776f.htm">variable types</a> allows:
      </p><ul><li><p>
            clients that only know the supertype are able to handle an instance of the subtype as if it is an instance of the supertype;
          </p></li><li><p>
            instances of the supertype can be replaced by instances of the subtype;
          </p></li><li><p>
            specialised types that inherit common characteristics of the base type.
          </p></li></ul><p>
        In other words, subtypes reflect the structure defined by their supertype but may add additional characteristics. For example, a vendor may wish to extend a general <span class="code">TemperatureSensor</span><a href="1bc63c28-33da-4c76-b8f6-8df43f0a776f.htm">VariableType</a> by adding a property providing the next maintenance interval. The vendor would do this by creating a new <a href="1bc63c28-33da-4c76-b8f6-8df43f0a776f.htm">VariableType</a> which is a target node for a <a href="57be83ea-0aac-4456-b29a-0b18a8467134.htm#HasSubtype">HasSubtype</a> reference from the original <a href="1bc63c28-33da-4c76-b8f6-8df43f0a776f.htm">VariableType</a> and adding the new property to it.
      </p></div><div class="collapsibleAreaRegion" id="InstantiationOfComplexTypeDefinitionNodes"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Instantiation of Complex Type Definition Nodes</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
        The instantiation of complex type definition nodes depends on the modelling rules. However, the intention is that instances of a type definition will reflect the structure defined by the type definition node. Figure 3 shows an instance of the type definition node <span class="code">AI_BLK_TYPE</span>, where the modelling rule Mandatory was applied for its containing <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a>. Thus, an instance of <span class="code">AI_BLK_TYPE</span>, called <span class="code">AI_BLK_1</span>, has a <a href="57be83ea-0aac-4456-b29a-0b18a8467134.htm#HasTypeDefinition">HasTypeDefinition</a> reference to <span class="code">AI_BLK_TYPE</span>. It also contains a <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a><span class="code">SP</span> having the same valu of the <a href="467e8ac2-46d8-4758-8965-a891200787ee.htm#BrowseName">BrowseName</a> as the <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a><span class="code">SP</span> used by the type definition node and thereby reflects the structure defined by the type definition node.
      </p><div class="mediaCenter"><img alt="Object and its Components defined by an ObjectType" src="../media/ObjectandComponentsDefinedByObjectType.JPG" /><div class="caption"><span class="captionLead">Figure 3:
						</span>Object and its Components defined by an ObjectType</div></div><p>
        A client knowing the <a href="9d541e15-812b-4dce-9b4c-7b0d66e74daf.htm">ObjectType</a><span class="code">AI_BLK_TYPE</span> can use this knowledge to directly browse to the containing nodes for each instance of this type. This allows programming against the type definition node. For example, a graphical element may be programmed in the client that handles all instances of <span class="code">AI_BLK_TYPE</span> in the same way by showing the value of <span class="code">SP</span>.
      </p><p>
        To allow this simple addressing, a type definition node or an instance declaration shall never reference two nodes having the same <a href="467e8ac2-46d8-4758-8965-a891200787ee.htm#BrowseName">BrowseName</a> using hierarchical references in forward direction. Instances based on instance declarations shall always keep the same <a href="467e8ac2-46d8-4758-8965-a891200787ee.htm#BrowseName">BrowseName</a> as the instance declaration they are derived from. A special service described in section <a href="ef0092b5-9f31-4e8d-9901-270be06e6577.htm">Services</a> called TranslateBrowsePathsToNodeIds may be used to identify the instances based on the instance declarations. Using the simple Browse service might not be sufficient since the uniqueness of the <a href="467e8ac2-46d8-4758-8965-a891200787ee.htm#BrowseName">BrowseName</a> is only required for type definition nodes and instance declarations, not for other instances. Thus, <span class="code">AI_BLK_1</span> may have another <a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a> with the <a href="467e8ac2-46d8-4758-8965-a891200787ee.htm#BrowseName">BrowseName</a><span class="code">SP</span>, although this one would not be derived from an instance declaration of the type definition node.
      </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
          Instances derived from an instance declaration shall be of the same type definition node or a subtype of this type definition node
        </p></td></tr></table></div><p>
        A type definition node and its InstanceDeclarations shall always reside in the same server. However, instances may point with their <a href="57be83ea-0aac-4456-b29a-0b18a8467134.htm#HasTypeDefinition">HasTypeDefinition</a> Reference to a type definition node in a different server.
      </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="d38394a1-c1c0-4c91-8a38-4fa47ad2bf35.htm">Object</a></div><div class="seeAlsoStyle"><a href="5ed97e29-a505-4050-af5d-8b2c8d80a045.htm">Variable</a></div><div class="seeAlsoStyle"><a href="d43f206c-8b58-4ded-b9c8-74eaac63cb36.htm">Standard Variable Types</a></div><div class="seeAlsoStyle"><a href="3f999f23-4ad7-46a4-80dd-ab33729d5f49.htm">Information Model</a></div><div class="seeAlsoStyle"><a href="9d541e15-812b-4dce-9b4c-7b0d66e74daf.htm">ObjectType</a></div><div class="seeAlsoStyle"><a href="1bc63c28-33da-4c76-b8f6-8df43f0a776f.htm">VariableType</a></div><div class="seeAlsoStyle"><a href="ef0092b5-9f31-4e8d-9901-270be06e6577.htm">Services</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://www.commsvr.com/" target="_blank">Copyright (c) 2020 Mariusz Postol</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:techsupp%40cas.eu?Subject=OPC%20Unified%20Architecture">CAS</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>